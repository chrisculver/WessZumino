<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="442" onload="init(evt)" viewBox="0 0 1200 442" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="442" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy record --native -o profile_qiskitPS_cutoff8.svg -- python tst.py</text><text id="details" x="10" y="40.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="431.00"> </text><svg id="frames" x="10" width="1180" total_samples="82472"><g><title>&lt;module&gt; (tst.py:11) (95 samples, 0.12%)</title><rect x="0.0012%" y="84" width="0.1152%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="95"/><text x="0.2512%" y="94.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1027) (95 samples, 0.12%)</title><rect x="0.0012%" y="100" width="0.1152%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="95"/><text x="0.2512%" y="110.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1006) (95 samples, 0.12%)</title><rect x="0.0012%" y="116" width="0.1152%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="95"/><text x="0.2512%" y="126.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:688) (95 samples, 0.12%)</title><rect x="0.0012%" y="132" width="0.1152%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="95"/><text x="0.2512%" y="142.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:883) (95 samples, 0.12%)</title><rect x="0.0012%" y="148" width="0.1152%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="95"/><text x="0.2512%" y="158.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (95 samples, 0.12%)</title><rect x="0.0012%" y="164" width="0.1152%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="95"/><text x="0.2512%" y="174.50"></text></g><g><title>&lt;module&gt; (qiskit_utilities.py:1) (95 samples, 0.12%)</title><rect x="0.0012%" y="180" width="0.1152%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="95"/><text x="0.2512%" y="190.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1027) (95 samples, 0.12%)</title><rect x="0.0012%" y="196" width="0.1152%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="95"/><text x="0.2512%" y="206.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:992) (89 samples, 0.11%)</title><rect x="0.0085%" y="212" width="0.1079%" height="15" fill="rgb(218,30,26)" fg:x="7" fg:w="89"/><text x="0.2585%" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (89 samples, 0.11%)</title><rect x="0.0085%" y="228" width="0.1079%" height="15" fill="rgb(220,122,19)" fg:x="7" fg:w="89"/><text x="0.2585%" y="238.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1027) (89 samples, 0.11%)</title><rect x="0.0085%" y="244" width="0.1079%" height="15" fill="rgb(250,228,42)" fg:x="7" fg:w="89"/><text x="0.2585%" y="254.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1006) (89 samples, 0.11%)</title><rect x="0.0085%" y="260" width="0.1079%" height="15" fill="rgb(240,193,28)" fg:x="7" fg:w="89"/><text x="0.2585%" y="270.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:688) (89 samples, 0.11%)</title><rect x="0.0085%" y="276" width="0.1079%" height="15" fill="rgb(216,20,37)" fg:x="7" fg:w="89"/><text x="0.2585%" y="286.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:883) (89 samples, 0.11%)</title><rect x="0.0085%" y="292" width="0.1079%" height="15" fill="rgb(206,188,39)" fg:x="7" fg:w="89"/><text x="0.2585%" y="302.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (89 samples, 0.11%)</title><rect x="0.0085%" y="308" width="0.1079%" height="15" fill="rgb(217,207,13)" fg:x="7" fg:w="89"/><text x="0.2585%" y="318.50"></text></g><g><title>&lt;module&gt; (tst.py:18) (128 samples, 0.16%)</title><rect x="0.1164%" y="84" width="0.1552%" height="15" fill="rgb(231,73,38)" fg:x="96" fg:w="128"/><text x="0.3664%" y="94.50"></text></g><g><title>convert_to_matrix (ham_to_sparse_matrix.py:77) (129 samples, 0.16%)</title><rect x="0.2716%" y="100" width="0.1564%" height="15" fill="rgb(225,20,46)" fg:x="224" fg:w="129"/><text x="0.5216%" y="110.50"></text></g><g><title>&lt;module&gt; (tst.py:20) (130 samples, 0.16%)</title><rect x="0.2716%" y="84" width="0.1576%" height="15" fill="rgb(210,31,41)" fg:x="224" fg:w="130"/><text x="0.5216%" y="94.50"></text></g><g><title>PyArray_AssignArray (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (299 samples, 0.36%)</title><rect x="0.5602%" y="324" width="0.3625%" height="15" fill="rgb(221,200,47)" fg:x="462" fg:w="299"/><text x="0.8102%" y="334.50"></text></g><g><title>raw_array_assign_array (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (298 samples, 0.36%)</title><rect x="0.5614%" y="340" width="0.3613%" height="15" fill="rgb(226,26,5)" fg:x="463" fg:w="298"/><text x="0.8114%" y="350.50"></text></g><g><title>_contig_to_contig (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (298 samples, 0.36%)</title><rect x="0.5614%" y="356" width="0.3613%" height="15" fill="rgb(249,33,26)" fg:x="463" fg:w="298"/><text x="0.8114%" y="366.50"></text></g><g><title>_add (qiskit/quantum_info/operators/symplectic/pauli_list.py:736) (339 samples, 0.41%)</title><rect x="0.5202%" y="180" width="0.4110%" height="15" fill="rgb(235,183,28)" fg:x="429" fg:w="339"/><text x="0.7702%" y="190.50"></text></g><g><title>hstack (&lt;__array_function__ internals&gt;:180) (325 samples, 0.39%)</title><rect x="0.5372%" y="196" width="0.3941%" height="15" fill="rgb(221,5,38)" fg:x="443" fg:w="325"/><text x="0.7872%" y="206.50"></text></g><g><title>array_implement_array_function (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (325 samples, 0.39%)</title><rect x="0.5372%" y="212" width="0.3941%" height="15" fill="rgb(247,18,42)" fg:x="443" fg:w="325"/><text x="0.7872%" y="222.50"></text></g><g><title>hstack (numpy/core/shape_base.py:343) (315 samples, 0.38%)</title><rect x="0.5493%" y="228" width="0.3819%" height="15" fill="rgb(241,131,45)" fg:x="453" fg:w="315"/><text x="0.7993%" y="238.50"></text></g><g><title>concatenate (&lt;__array_function__ internals&gt;:180) (310 samples, 0.38%)</title><rect x="0.5553%" y="244" width="0.3759%" height="15" fill="rgb(249,31,29)" fg:x="458" fg:w="310"/><text x="0.8053%" y="254.50"></text></g><g><title>array_implement_array_function (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (310 samples, 0.38%)</title><rect x="0.5553%" y="260" width="0.3759%" height="15" fill="rgb(225,111,53)" fg:x="458" fg:w="310"/><text x="0.8053%" y="270.50"></text></g><g><title>array_concatenate (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (310 samples, 0.38%)</title><rect x="0.5553%" y="276" width="0.3759%" height="15" fill="rgb(238,160,17)" fg:x="458" fg:w="310"/><text x="0.8053%" y="286.50"></text></g><g><title>PyArray_ConcatenateInto (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (309 samples, 0.37%)</title><rect x="0.5566%" y="292" width="0.3747%" height="15" fill="rgb(214,148,48)" fg:x="459" fg:w="309"/><text x="0.8066%" y="302.50"></text></g><g><title>PyArray_ConcatenateArrays (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (309 samples, 0.37%)</title><rect x="0.5566%" y="308" width="0.3747%" height="15" fill="rgb(232,36,49)" fg:x="459" fg:w="309"/><text x="0.8066%" y="318.50"></text></g><g><title>PyArray_AssignArray (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (341 samples, 0.41%)</title><rect x="0.9688%" y="324" width="0.4135%" height="15" fill="rgb(209,103,24)" fg:x="799" fg:w="341"/><text x="1.2188%" y="334.50"></text></g><g><title>raw_array_assign_array (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (340 samples, 0.41%)</title><rect x="0.9700%" y="340" width="0.4123%" height="15" fill="rgb(229,88,8)" fg:x="800" fg:w="340"/><text x="1.2200%" y="350.50"></text></g><g><title>_contig_to_contig (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (340 samples, 0.41%)</title><rect x="0.9700%" y="356" width="0.4123%" height="15" fill="rgb(213,181,19)" fg:x="800" fg:w="340"/><text x="1.2200%" y="366.50"></text></g><g><title>PyArray_ConcatenateArrays (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (346 samples, 0.42%)</title><rect x="0.9688%" y="308" width="0.4195%" height="15" fill="rgb(254,191,54)" fg:x="799" fg:w="346"/><text x="1.2188%" y="318.50"></text></g><g><title>_add (qiskit/quantum_info/operators/symplectic/pauli_list.py:739) (382 samples, 0.46%)</title><rect x="0.9312%" y="180" width="0.4632%" height="15" fill="rgb(241,83,37)" fg:x="768" fg:w="382"/><text x="1.1812%" y="190.50"></text></g><g><title>vstack (&lt;__array_function__ internals&gt;:180) (374 samples, 0.45%)</title><rect x="0.9409%" y="196" width="0.4535%" height="15" fill="rgb(233,36,39)" fg:x="776" fg:w="374"/><text x="1.1909%" y="206.50"></text></g><g><title>array_implement_array_function (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (373 samples, 0.45%)</title><rect x="0.9421%" y="212" width="0.4523%" height="15" fill="rgb(226,3,54)" fg:x="777" fg:w="373"/><text x="1.1921%" y="222.50"></text></g><g><title>vstack (numpy/core/shape_base.py:282) (361 samples, 0.44%)</title><rect x="0.9567%" y="228" width="0.4377%" height="15" fill="rgb(245,192,40)" fg:x="789" fg:w="361"/><text x="1.2067%" y="238.50"></text></g><g><title>concatenate (&lt;__array_function__ internals&gt;:180) (358 samples, 0.43%)</title><rect x="0.9603%" y="244" width="0.4341%" height="15" fill="rgb(238,167,29)" fg:x="792" fg:w="358"/><text x="1.2103%" y="254.50"></text></g><g><title>array_implement_array_function (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (355 samples, 0.43%)</title><rect x="0.9640%" y="260" width="0.4304%" height="15" fill="rgb(232,182,51)" fg:x="795" fg:w="355"/><text x="1.2140%" y="270.50"></text></g><g><title>array_concatenate (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (355 samples, 0.43%)</title><rect x="0.9640%" y="276" width="0.4304%" height="15" fill="rgb(231,60,39)" fg:x="795" fg:w="355"/><text x="1.2140%" y="286.50"></text></g><g><title>PyArray_ConcatenateInto (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (351 samples, 0.43%)</title><rect x="0.9688%" y="292" width="0.4256%" height="15" fill="rgb(208,69,12)" fg:x="799" fg:w="351"/><text x="1.2188%" y="302.50"></text></g><g><title>_contig_to_contig (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (361 samples, 0.44%)</title><rect x="1.4223%" y="356" width="0.4377%" height="15" fill="rgb(235,93,37)" fg:x="1173" fg:w="361"/><text x="1.6723%" y="366.50"></text></g><g><title>PyArray_AssignArray (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (366 samples, 0.44%)</title><rect x="1.4175%" y="324" width="0.4438%" height="15" fill="rgb(213,116,39)" fg:x="1169" fg:w="366"/><text x="1.6675%" y="334.50"></text></g><g><title>raw_array_assign_array (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (365 samples, 0.44%)</title><rect x="1.4187%" y="340" width="0.4426%" height="15" fill="rgb(222,207,29)" fg:x="1170" fg:w="365"/><text x="1.6687%" y="350.50"></text></g><g><title>_add (qiskit/quantum_info/operators/symplectic/pauli_list.py:740) (389 samples, 0.47%)</title><rect x="1.3944%" y="180" width="0.4717%" height="15" fill="rgb(206,96,30)" fg:x="1150" fg:w="389"/><text x="1.6444%" y="190.50"></text></g><g><title>vstack (&lt;__array_function__ internals&gt;:180) (382 samples, 0.46%)</title><rect x="1.4029%" y="196" width="0.4632%" height="15" fill="rgb(218,138,4)" fg:x="1157" fg:w="382"/><text x="1.6529%" y="206.50"></text></g><g><title>array_implement_array_function (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (382 samples, 0.46%)</title><rect x="1.4029%" y="212" width="0.4632%" height="15" fill="rgb(250,191,14)" fg:x="1157" fg:w="382"/><text x="1.6529%" y="222.50"></text></g><g><title>vstack (numpy/core/shape_base.py:282) (375 samples, 0.45%)</title><rect x="1.4114%" y="228" width="0.4547%" height="15" fill="rgb(239,60,40)" fg:x="1164" fg:w="375"/><text x="1.6614%" y="238.50"></text></g><g><title>concatenate (&lt;__array_function__ internals&gt;:180) (372 samples, 0.45%)</title><rect x="1.4150%" y="244" width="0.4511%" height="15" fill="rgb(206,27,48)" fg:x="1167" fg:w="372"/><text x="1.6650%" y="254.50"></text></g><g><title>array_implement_array_function (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (372 samples, 0.45%)</title><rect x="1.4150%" y="260" width="0.4511%" height="15" fill="rgb(225,35,8)" fg:x="1167" fg:w="372"/><text x="1.6650%" y="270.50"></text></g><g><title>array_concatenate (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (372 samples, 0.45%)</title><rect x="1.4150%" y="276" width="0.4511%" height="15" fill="rgb(250,213,24)" fg:x="1167" fg:w="372"/><text x="1.6650%" y="286.50"></text></g><g><title>PyArray_ConcatenateInto (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (372 samples, 0.45%)</title><rect x="1.4150%" y="292" width="0.4511%" height="15" fill="rgb(247,123,22)" fg:x="1167" fg:w="372"/><text x="1.6650%" y="302.50"></text></g><g><title>PyArray_ConcatenateArrays (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (371 samples, 0.45%)</title><rect x="1.4162%" y="308" width="0.4498%" height="15" fill="rgb(231,138,38)" fg:x="1168" fg:w="371"/><text x="1.6662%" y="318.50"></text></g><g><title>_add (qiskit/quantum_info/operators/symplectic/sparse_pauli_op.py:349) (1,169 samples, 1.42%)</title><rect x="0.5141%" y="164" width="1.4175%" height="15" fill="rgb(231,145,46)" fg:x="424" fg:w="1169"/><text x="0.7641%" y="174.50"></text></g><g><title>PyArray_AssignArray (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (668 samples, 0.81%)</title><rect x="1.9631%" y="308" width="0.8100%" height="15" fill="rgb(251,118,11)" fg:x="1619" fg:w="668"/><text x="2.2131%" y="318.50"></text></g><g><title>raw_array_assign_array (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (668 samples, 0.81%)</title><rect x="1.9631%" y="324" width="0.8100%" height="15" fill="rgb(217,147,25)" fg:x="1619" fg:w="668"/><text x="2.2131%" y="334.50"></text></g><g><title>_contig_to_contig (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (666 samples, 0.81%)</title><rect x="1.9655%" y="340" width="0.8075%" height="15" fill="rgb(247,81,37)" fg:x="1621" fg:w="666"/><text x="2.2155%" y="350.50"></text></g><g><title>PyArray_ConcatenateArrays (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (674 samples, 0.82%)</title><rect x="1.9631%" y="292" width="0.8172%" height="15" fill="rgb(209,12,38)" fg:x="1619" fg:w="674"/><text x="2.2131%" y="302.50"></text></g><g><title>_add (qiskit/quantum_info/operators/symplectic/sparse_pauli_op.py:350) (702 samples, 0.85%)</title><rect x="1.9316%" y="164" width="0.8512%" height="15" fill="rgb(227,1,9)" fg:x="1593" fg:w="702"/><text x="2.1816%" y="174.50"></text></g><g><title>hstack (&lt;__array_function__ internals&gt;:180) (693 samples, 0.84%)</title><rect x="1.9425%" y="180" width="0.8403%" height="15" fill="rgb(248,47,43)" fg:x="1602" fg:w="693"/><text x="2.1925%" y="190.50"></text></g><g><title>array_implement_array_function (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (692 samples, 0.84%)</title><rect x="1.9437%" y="196" width="0.8391%" height="15" fill="rgb(221,10,30)" fg:x="1603" fg:w="692"/><text x="2.1937%" y="206.50"></text></g><g><title>hstack (numpy/core/shape_base.py:343) (679 samples, 0.82%)</title><rect x="1.9595%" y="212" width="0.8233%" height="15" fill="rgb(210,229,1)" fg:x="1616" fg:w="679"/><text x="2.2095%" y="222.50"></text></g><g><title>concatenate (&lt;__array_function__ internals&gt;:180) (679 samples, 0.82%)</title><rect x="1.9595%" y="228" width="0.8233%" height="15" fill="rgb(222,148,37)" fg:x="1616" fg:w="679"/><text x="2.2095%" y="238.50"></text></g><g><title>array_implement_array_function (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (678 samples, 0.82%)</title><rect x="1.9607%" y="244" width="0.8221%" height="15" fill="rgb(234,67,33)" fg:x="1617" fg:w="678"/><text x="2.2107%" y="254.50"></text></g><g><title>array_concatenate (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (677 samples, 0.82%)</title><rect x="1.9619%" y="260" width="0.8209%" height="15" fill="rgb(247,98,35)" fg:x="1618" fg:w="677"/><text x="2.2119%" y="270.50"></text></g><g><title>PyArray_ConcatenateInto (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (677 samples, 0.82%)</title><rect x="1.9619%" y="276" width="0.8209%" height="15" fill="rgb(247,138,52)" fg:x="1618" fg:w="677"/><text x="2.2119%" y="286.50"></text></g><g><title>__add__ (qiskit/quantum_info/operators/mixins/linear.py:46) (1,940 samples, 2.35%)</title><rect x="0.4996%" y="148" width="2.3523%" height="15" fill="rgb(213,79,30)" fg:x="412" fg:w="1940"/><text x="0.7496%" y="158.50">_..</text></g><g><title>_multiply (qiskit/quantum_info/operators/symplectic/sparse_pauli_op.py:366) (95 samples, 0.12%)</title><rect x="2.8664%" y="164" width="0.1152%" height="15" fill="rgb(246,177,23)" fg:x="2364" fg:w="95"/><text x="3.1164%" y="174.50"></text></g><g><title>generic_wrapped_legacy_loop (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (909 samples, 1.10%)</title><rect x="3.0519%" y="228" width="1.1022%" height="15" fill="rgb(230,62,27)" fg:x="2517" fg:w="909"/><text x="3.3019%" y="238.50"></text></g><g><title>CDOUBLE_multiply_AVX2 (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (909 samples, 1.10%)</title><rect x="3.0519%" y="244" width="1.1022%" height="15" fill="rgb(216,154,8)" fg:x="2517" fg:w="909"/><text x="3.3019%" y="254.50"></text></g><g><title>array_multiply (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (964 samples, 1.17%)</title><rect x="2.9877%" y="180" width="1.1689%" height="15" fill="rgb(244,35,45)" fg:x="2464" fg:w="964"/><text x="3.2377%" y="190.50"></text></g><g><title>ufunc_generic_fastcall (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (961 samples, 1.17%)</title><rect x="2.9913%" y="196" width="1.1652%" height="15" fill="rgb(251,115,12)" fg:x="2467" fg:w="961"/><text x="3.2413%" y="206.50"></text></g><g><title>try_trivial_single_output_loop (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (919 samples, 1.11%)</title><rect x="3.0422%" y="212" width="1.1143%" height="15" fill="rgb(240,54,50)" fg:x="2509" fg:w="919"/><text x="3.2922%" y="222.50"></text></g><g><title>PyArray_AssignArray (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (230 samples, 0.28%)</title><rect x="4.2039%" y="228" width="0.2789%" height="15" fill="rgb(233,84,52)" fg:x="3467" fg:w="230"/><text x="4.4539%" y="238.50"></text></g><g><title>raw_array_assign_array (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (229 samples, 0.28%)</title><rect x="4.2051%" y="244" width="0.2777%" height="15" fill="rgb(207,117,47)" fg:x="3468" fg:w="229"/><text x="4.4551%" y="254.50"></text></g><g><title>_contig_to_contig (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (224 samples, 0.27%)</title><rect x="4.2111%" y="260" width="0.2716%" height="15" fill="rgb(249,43,39)" fg:x="3473" fg:w="224"/><text x="4.4611%" y="270.50"></text></g><g><title>PyArray_NewCopy (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (236 samples, 0.29%)</title><rect x="4.2039%" y="212" width="0.2862%" height="15" fill="rgb(209,38,44)" fg:x="3467" fg:w="236"/><text x="4.4539%" y="222.50"></text></g><g><title>copy (qiskit/quantum_info/operators/symplectic/base_pauli.py:58) (241 samples, 0.29%)</title><rect x="4.1990%" y="180" width="0.2922%" height="15" fill="rgb(236,212,23)" fg:x="3463" fg:w="241"/><text x="4.4490%" y="190.50"></text></g><g><title>array_copy (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (238 samples, 0.29%)</title><rect x="4.2026%" y="196" width="0.2886%" height="15" fill="rgb(242,79,21)" fg:x="3466" fg:w="238"/><text x="4.4526%" y="206.50"></text></g><g><title>PyArray_AssignArray (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (303 samples, 0.37%)</title><rect x="4.5021%" y="228" width="0.3674%" height="15" fill="rgb(211,96,35)" fg:x="3713" fg:w="303"/><text x="4.7521%" y="238.50"></text></g><g><title>raw_array_assign_array (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (303 samples, 0.37%)</title><rect x="4.5021%" y="244" width="0.3674%" height="15" fill="rgb(253,215,40)" fg:x="3713" fg:w="303"/><text x="4.7521%" y="254.50"></text></g><g><title>_contig_to_contig (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (301 samples, 0.36%)</title><rect x="4.5046%" y="260" width="0.3650%" height="15" fill="rgb(211,81,21)" fg:x="3715" fg:w="301"/><text x="4.7546%" y="270.50"></text></g><g><title>PyArray_NewCopy (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (308 samples, 0.37%)</title><rect x="4.5021%" y="212" width="0.3735%" height="15" fill="rgb(208,190,38)" fg:x="3713" fg:w="308"/><text x="4.7521%" y="222.50"></text></g><g><title>copy (qiskit/quantum_info/operators/symplectic/base_pauli.py:59) (318 samples, 0.39%)</title><rect x="4.4912%" y="180" width="0.3856%" height="15" fill="rgb(235,213,38)" fg:x="3704" fg:w="318"/><text x="4.7412%" y="190.50"></text></g><g><title>array_copy (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (309 samples, 0.37%)</title><rect x="4.5021%" y="196" width="0.3747%" height="15" fill="rgb(237,122,38)" fg:x="3713" fg:w="309"/><text x="4.7521%" y="206.50"></text></g><g><title>_contig_to_contig (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (311 samples, 0.38%)</title><rect x="4.8841%" y="260" width="0.3771%" height="15" fill="rgb(244,218,35)" fg:x="4028" fg:w="311"/><text x="5.1341%" y="270.50"></text></g><g><title>PyArray_AssignArray (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (315 samples, 0.38%)</title><rect x="4.8804%" y="228" width="0.3819%" height="15" fill="rgb(240,68,47)" fg:x="4025" fg:w="315"/><text x="5.1304%" y="238.50"></text></g><g><title>raw_array_assign_array (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (313 samples, 0.38%)</title><rect x="4.8829%" y="244" width="0.3795%" height="15" fill="rgb(210,16,53)" fg:x="4027" fg:w="313"/><text x="5.1329%" y="254.50"></text></g><g><title>__rmul__ (qiskit/quantum_info/operators/mixins/multiply.py:36) (1,988 samples, 2.41%)</title><rect x="2.8579%" y="148" width="2.4105%" height="15" fill="rgb(235,124,12)" fg:x="2357" fg:w="1988"/><text x="3.1079%" y="158.50">__..</text></g><g><title>_multiply (qiskit/quantum_info/operators/symplectic/sparse_pauli_op.py:367) (1,886 samples, 2.29%)</title><rect x="2.9816%" y="164" width="2.2868%" height="15" fill="rgb(224,169,11)" fg:x="2459" fg:w="1886"/><text x="3.2316%" y="174.50">_..</text></g><g><title>copy (qiskit/quantum_info/operators/symplectic/base_pauli.py:60) (323 samples, 0.39%)</title><rect x="4.8768%" y="180" width="0.3916%" height="15" fill="rgb(250,166,2)" fg:x="4022" fg:w="323"/><text x="5.1268%" y="190.50"></text></g><g><title>array_copy (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (320 samples, 0.39%)</title><rect x="4.8804%" y="196" width="0.3880%" height="15" fill="rgb(242,216,29)" fg:x="4025" fg:w="320"/><text x="5.1304%" y="206.50"></text></g><g><title>PyArray_NewCopy (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (320 samples, 0.39%)</title><rect x="4.8804%" y="212" width="0.3880%" height="15" fill="rgb(230,116,27)" fg:x="4025" fg:w="320"/><text x="5.1304%" y="222.50"></text></g><g><title>__add__ (qiskit/opflow/mixins/star_algebra.py:66) (3,975 samples, 4.82%)</title><rect x="0.4583%" y="116" width="4.8198%" height="15" fill="rgb(228,99,48)" fg:x="378" fg:w="3975"/><text x="0.7083%" y="126.50">__add_..</text></g><g><title>add (qiskit/opflow/primitive_ops/pauli_sum_op.py:126) (3,969 samples, 4.81%)</title><rect x="0.4656%" y="132" width="4.8125%" height="15" fill="rgb(253,11,6)" fg:x="384" fg:w="3969"/><text x="0.7156%" y="142.50">add (q..</text></g><g><title>add (qiskit/opflow/primitive_ops/pauli_op.py:77) (129 samples, 0.16%)</title><rect x="5.4819%" y="164" width="0.1564%" height="15" fill="rgb(247,143,39)" fg:x="4521" fg:w="129"/><text x="5.7319%" y="174.50"></text></g><g><title>new_basis_to_pauli_string (qiskit_utilities.py:101) (244 samples, 0.30%)</title><rect x="5.3946%" y="132" width="0.2959%" height="15" fill="rgb(236,97,10)" fg:x="4449" fg:w="244"/><text x="5.6446%" y="142.50"></text></g><g><title>__sub__ (qiskit/opflow/mixins/star_algebra.py:76) (233 samples, 0.28%)</title><rect x="5.4079%" y="148" width="0.2825%" height="15" fill="rgb(233,208,19)" fg:x="4460" fg:w="233"/><text x="5.6579%" y="158.50"></text></g><g><title>add (qiskit/opflow/primitive_ops/pauli_op.py:77) (129 samples, 0.16%)</title><rect x="5.7607%" y="164" width="0.1564%" height="15" fill="rgb(216,164,2)" fg:x="4751" fg:w="129"/><text x="6.0107%" y="174.50"></text></g><g><title>__add__ (qiskit/opflow/mixins/star_algebra.py:66) (213 samples, 0.26%)</title><rect x="5.6977%" y="148" width="0.2583%" height="15" fill="rgb(220,129,5)" fg:x="4699" fg:w="213"/><text x="5.9477%" y="158.50"></text></g><g><title>new_basis_to_pauli_string (qiskit_utilities.py:92) (233 samples, 0.28%)</title><rect x="5.6916%" y="132" width="0.2825%" height="15" fill="rgb(242,17,10)" fg:x="4694" fg:w="233"/><text x="5.9416%" y="142.50"></text></g><g><title>new_convert_element (qiskit_utilities.py:82) (543 samples, 0.66%)</title><rect x="5.3933%" y="116" width="0.6584%" height="15" fill="rgb(242,107,0)" fg:x="4448" fg:w="543"/><text x="5.6433%" y="126.50"></text></g><g><title>_tensor (qiskit/quantum_info/operators/symplectic/base_pauli.py:75) (163 samples, 0.20%)</title><rect x="6.3234%" y="228" width="0.1976%" height="15" fill="rgb(251,28,31)" fg:x="5215" fg:w="163"/><text x="6.5734%" y="238.50"></text></g><g><title>_stack (qiskit/quantum_info/operators/symplectic/base_pauli.py:351) (151 samples, 0.18%)</title><rect x="6.3379%" y="244" width="0.1831%" height="15" fill="rgb(233,223,10)" fg:x="5227" fg:w="151"/><text x="6.5879%" y="254.50"></text></g><g><title>hstack (&lt;__array_function__ internals&gt;:180) (84 samples, 0.10%)</title><rect x="6.4191%" y="260" width="0.1019%" height="15" fill="rgb(215,21,27)" fg:x="5294" fg:w="84"/><text x="6.6691%" y="270.50"></text></g><g><title>array_implement_array_function (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (84 samples, 0.10%)</title><rect x="6.4191%" y="276" width="0.1019%" height="15" fill="rgb(232,23,21)" fg:x="5294" fg:w="84"/><text x="6.6691%" y="286.50"></text></g><g><title>atleast_2d (&lt;__array_function__ internals&gt;:180) (123 samples, 0.15%)</title><rect x="6.5828%" y="308" width="0.1491%" height="15" fill="rgb(244,5,23)" fg:x="5429" fg:w="123"/><text x="6.8328%" y="318.50"></text></g><g><title>array_implement_array_function (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (122 samples, 0.15%)</title><rect x="6.5841%" y="324" width="0.1479%" height="15" fill="rgb(226,81,46)" fg:x="5430" fg:w="122"/><text x="6.8341%" y="334.50"></text></g><g><title>vstack (numpy/core/shape_base.py:279) (131 samples, 0.16%)</title><rect x="6.5744%" y="292" width="0.1588%" height="15" fill="rgb(247,70,30)" fg:x="5422" fg:w="131"/><text x="6.8244%" y="302.50"></text></g><g><title>PyArray_AssignArray (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (111 samples, 0.13%)</title><rect x="6.7635%" y="388" width="0.1346%" height="15" fill="rgb(212,68,19)" fg:x="5578" fg:w="111"/><text x="7.0135%" y="398.50"></text></g><g><title>raw_array_assign_array (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (90 samples, 0.11%)</title><rect x="6.7890%" y="404" width="0.1091%" height="15" fill="rgb(240,187,13)" fg:x="5599" fg:w="90"/><text x="7.0390%" y="414.50"></text></g><g><title>PyArray_ConcatenateArrays (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (129 samples, 0.16%)</title><rect x="6.7599%" y="372" width="0.1564%" height="15" fill="rgb(223,113,26)" fg:x="5575" fg:w="129"/><text x="7.0099%" y="382.50"></text></g><g><title>_tensor (qiskit/quantum_info/operators/symplectic/base_pauli.py:76) (352 samples, 0.43%)</title><rect x="6.5210%" y="228" width="0.4268%" height="15" fill="rgb(206,192,2)" fg:x="5378" fg:w="352"/><text x="6.7710%" y="238.50"></text></g><g><title>_stack (qiskit/quantum_info/operators/symplectic/base_pauli.py:350) (345 samples, 0.42%)</title><rect x="6.5295%" y="244" width="0.4183%" height="15" fill="rgb(241,108,4)" fg:x="5385" fg:w="345"/><text x="6.7795%" y="254.50"></text></g><g><title>vstack (&lt;__array_function__ internals&gt;:180) (315 samples, 0.38%)</title><rect x="6.5659%" y="260" width="0.3819%" height="15" fill="rgb(247,173,49)" fg:x="5415" fg:w="315"/><text x="6.8159%" y="270.50"></text></g><g><title>array_implement_array_function (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (314 samples, 0.38%)</title><rect x="6.5671%" y="276" width="0.3807%" height="15" fill="rgb(224,114,35)" fg:x="5416" fg:w="314"/><text x="6.8171%" y="286.50"></text></g><g><title>vstack (numpy/core/shape_base.py:282) (177 samples, 0.21%)</title><rect x="6.7332%" y="292" width="0.2146%" height="15" fill="rgb(245,159,27)" fg:x="5553" fg:w="177"/><text x="6.9832%" y="302.50"></text></g><g><title>concatenate (&lt;__array_function__ internals&gt;:180) (167 samples, 0.20%)</title><rect x="6.7453%" y="308" width="0.2025%" height="15" fill="rgb(245,172,44)" fg:x="5563" fg:w="167"/><text x="6.9953%" y="318.50"></text></g><g><title>array_implement_array_function (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (167 samples, 0.20%)</title><rect x="6.7453%" y="324" width="0.2025%" height="15" fill="rgb(236,23,11)" fg:x="5563" fg:w="167"/><text x="6.9953%" y="334.50"></text></g><g><title>array_concatenate (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (164 samples, 0.20%)</title><rect x="6.7490%" y="340" width="0.1989%" height="15" fill="rgb(205,117,38)" fg:x="5566" fg:w="164"/><text x="6.9990%" y="350.50"></text></g><g><title>PyArray_ConcatenateInto (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (162 samples, 0.20%)</title><rect x="6.7514%" y="356" width="0.1964%" height="15" fill="rgb(237,72,25)" fg:x="5568" fg:w="162"/><text x="7.0014%" y="366.50"></text></g><g><title>vstack (numpy/core/shape_base.py:279) (116 samples, 0.14%)</title><rect x="7.0824%" y="292" width="0.1407%" height="15" fill="rgb(244,70,9)" fg:x="5841" fg:w="116"/><text x="7.3324%" y="302.50"></text></g><g><title>atleast_2d (&lt;__array_function__ internals&gt;:180) (104 samples, 0.13%)</title><rect x="7.0970%" y="308" width="0.1261%" height="15" fill="rgb(217,125,39)" fg:x="5853" fg:w="104"/><text x="7.3470%" y="318.50"></text></g><g><title>array_implement_array_function (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (104 samples, 0.13%)</title><rect x="7.0970%" y="324" width="0.1261%" height="15" fill="rgb(235,36,10)" fg:x="5853" fg:w="104"/><text x="7.3470%" y="334.50"></text></g><g><title>PyArray_AssignArray (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (102 samples, 0.12%)</title><rect x="7.2534%" y="388" width="0.1237%" height="15" fill="rgb(251,123,47)" fg:x="5982" fg:w="102"/><text x="7.5034%" y="398.50"></text></g><g><title>raw_array_assign_array (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (86 samples, 0.10%)</title><rect x="7.2728%" y="404" width="0.1043%" height="15" fill="rgb(221,13,13)" fg:x="5998" fg:w="86"/><text x="7.5228%" y="414.50"></text></g><g><title>PyArray_ConcatenateArrays (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (111 samples, 0.13%)</title><rect x="7.2497%" y="372" width="0.1346%" height="15" fill="rgb(238,131,9)" fg:x="5979" fg:w="111"/><text x="7.4997%" y="382.50"></text></g><g><title>concatenate (&lt;__array_function__ internals&gt;:180) (151 samples, 0.18%)</title><rect x="7.2340%" y="308" width="0.1831%" height="15" fill="rgb(211,50,8)" fg:x="5966" fg:w="151"/><text x="7.4840%" y="318.50"></text></g><g><title>array_implement_array_function (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (150 samples, 0.18%)</title><rect x="7.2352%" y="324" width="0.1819%" height="15" fill="rgb(245,182,24)" fg:x="5967" fg:w="150"/><text x="7.4852%" y="334.50"></text></g><g><title>array_concatenate (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (150 samples, 0.18%)</title><rect x="7.2352%" y="340" width="0.1819%" height="15" fill="rgb(242,14,37)" fg:x="5967" fg:w="150"/><text x="7.4852%" y="350.50"></text></g><g><title>PyArray_ConcatenateInto (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (146 samples, 0.18%)</title><rect x="7.2400%" y="356" width="0.1770%" height="15" fill="rgb(246,228,12)" fg:x="5971" fg:w="146"/><text x="7.4900%" y="366.50"></text></g><g><title>_tensor (qiskit/quantum_info/operators/symplectic/base_pauli.py:78) (311 samples, 0.38%)</title><rect x="7.0424%" y="228" width="0.3771%" height="15" fill="rgb(213,55,15)" fg:x="5808" fg:w="311"/><text x="7.2924%" y="238.50"></text></g><g><title>_stack (qiskit/quantum_info/operators/symplectic/base_pauli.py:350) (307 samples, 0.37%)</title><rect x="7.0472%" y="244" width="0.3722%" height="15" fill="rgb(209,9,3)" fg:x="5812" fg:w="307"/><text x="7.2972%" y="254.50"></text></g><g><title>vstack (&lt;__array_function__ internals&gt;:180) (287 samples, 0.35%)</title><rect x="7.0715%" y="260" width="0.3480%" height="15" fill="rgb(230,59,30)" fg:x="5832" fg:w="287"/><text x="7.3215%" y="270.50"></text></g><g><title>array_implement_array_function (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (285 samples, 0.35%)</title><rect x="7.0739%" y="276" width="0.3456%" height="15" fill="rgb(209,121,21)" fg:x="5834" fg:w="285"/><text x="7.3239%" y="286.50"></text></g><g><title>vstack (numpy/core/shape_base.py:282) (161 samples, 0.20%)</title><rect x="7.2243%" y="292" width="0.1952%" height="15" fill="rgb(220,109,13)" fg:x="5958" fg:w="161"/><text x="7.4743%" y="302.50"></text></g><g><title>vstack (&lt;__array_function__ internals&gt;:180) (86 samples, 0.10%)</title><rect x="7.4340%" y="244" width="0.1043%" height="15" fill="rgb(232,18,1)" fg:x="6131" fg:w="86"/><text x="7.6840%" y="254.50"></text></g><g><title>array_implement_array_function (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (84 samples, 0.10%)</title><rect x="7.4365%" y="260" width="0.1019%" height="15" fill="rgb(215,41,42)" fg:x="6133" fg:w="84"/><text x="7.6865%" y="270.50"></text></g><g><title>_tensor (qiskit/quantum_info/operators/symplectic/base_pauli.py:80) (99 samples, 0.12%)</title><rect x="7.4195%" y="228" width="0.1200%" height="15" fill="rgb(224,123,36)" fg:x="6119" fg:w="99"/><text x="7.6695%" y="238.50"></text></g><g><title>atleast_2d (numpy/core/shape_base.py:125) (137 samples, 0.17%)</title><rect x="7.7408%" y="340" width="0.1661%" height="15" fill="rgb(240,125,3)" fg:x="6384" fg:w="137"/><text x="7.9908%" y="350.50"></text></g><g><title>array_subscript (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (98 samples, 0.12%)</title><rect x="7.7881%" y="356" width="0.1188%" height="15" fill="rgb(205,98,50)" fg:x="6423" fg:w="98"/><text x="8.0381%" y="366.50"></text></g><g><title>atleast_2d (&lt;__array_function__ internals&gt;:180) (229 samples, 0.28%)</title><rect x="7.6620%" y="308" width="0.2777%" height="15" fill="rgb(205,185,37)" fg:x="6319" fg:w="229"/><text x="7.9120%" y="318.50"></text></g><g><title>array_implement_array_function (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (229 samples, 0.28%)</title><rect x="7.6620%" y="324" width="0.2777%" height="15" fill="rgb(238,207,15)" fg:x="6319" fg:w="229"/><text x="7.9120%" y="334.50"></text></g><g><title>vstack (numpy/core/shape_base.py:279) (241 samples, 0.29%)</title><rect x="7.6487%" y="292" width="0.2922%" height="15" fill="rgb(213,199,42)" fg:x="6308" fg:w="241"/><text x="7.8987%" y="302.50"></text></g><g><title>PyArray_AssignArray (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (98 samples, 0.12%)</title><rect x="7.9591%" y="388" width="0.1188%" height="15" fill="rgb(235,201,11)" fg:x="6564" fg:w="98"/><text x="8.2091%" y="398.50"></text></g><g><title>PyArray_ConcatenateArrays (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (121 samples, 0.15%)</title><rect x="7.9542%" y="372" width="0.1467%" height="15" fill="rgb(207,46,11)" fg:x="6560" fg:w="121"/><text x="8.2042%" y="382.50"></text></g><g><title>array_concatenate (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (151 samples, 0.18%)</title><rect x="7.9469%" y="340" width="0.1831%" height="15" fill="rgb(241,35,35)" fg:x="6554" fg:w="151"/><text x="8.1969%" y="350.50"></text></g><g><title>PyArray_ConcatenateInto (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (149 samples, 0.18%)</title><rect x="7.9494%" y="356" width="0.1807%" height="15" fill="rgb(243,32,47)" fg:x="6556" fg:w="149"/><text x="8.1994%" y="366.50"></text></g><g><title>concatenate (&lt;__array_function__ internals&gt;:180) (154 samples, 0.19%)</title><rect x="7.9457%" y="308" width="0.1867%" height="15" fill="rgb(247,202,23)" fg:x="6553" fg:w="154"/><text x="8.1957%" y="318.50"></text></g><g><title>array_implement_array_function (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (153 samples, 0.19%)</title><rect x="7.9469%" y="324" width="0.1855%" height="15" fill="rgb(219,102,11)" fg:x="6554" fg:w="153"/><text x="8.1969%" y="334.50"></text></g><g><title>_tensor (qiskit/quantum_info/operators/symplectic/base_pauli.py:84) (449 samples, 0.54%)</title><rect x="7.5892%" y="228" width="0.5444%" height="15" fill="rgb(243,110,44)" fg:x="6259" fg:w="449"/><text x="7.8392%" y="238.50"></text></g><g><title>_stack (qiskit/quantum_info/operators/symplectic/base_pauli.py:350) (444 samples, 0.54%)</title><rect x="7.5953%" y="244" width="0.5384%" height="15" fill="rgb(222,74,54)" fg:x="6264" fg:w="444"/><text x="7.8453%" y="254.50"></text></g><g><title>vstack (&lt;__array_function__ internals&gt;:180) (423 samples, 0.51%)</title><rect x="7.6208%" y="260" width="0.5129%" height="15" fill="rgb(216,99,12)" fg:x="6285" fg:w="423"/><text x="7.8708%" y="270.50"></text></g><g><title>array_implement_array_function (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (420 samples, 0.51%)</title><rect x="7.6244%" y="276" width="0.5093%" height="15" fill="rgb(226,22,26)" fg:x="6288" fg:w="420"/><text x="7.8744%" y="286.50"></text></g><g><title>vstack (numpy/core/shape_base.py:282) (156 samples, 0.19%)</title><rect x="7.9445%" y="292" width="0.1892%" height="15" fill="rgb(217,163,10)" fg:x="6552" fg:w="156"/><text x="8.1945%" y="302.50"></text></g><g><title>_tensor (qiskit/quantum_info/operators/symplectic/base_pauli.py:85) (98 samples, 0.12%)</title><rect x="8.1337%" y="228" width="0.1188%" height="15" fill="rgb(213,25,53)" fg:x="6708" fg:w="98"/><text x="8.3837%" y="238.50"></text></g><g><title>_tensor (qiskit/quantum_info/operators/symplectic/base_pauli.py:87) (98 samples, 0.12%)</title><rect x="8.3471%" y="228" width="0.1188%" height="15" fill="rgb(252,105,26)" fg:x="6884" fg:w="98"/><text x="8.5971%" y="238.50"></text></g><g><title>_tensor (qiskit/quantum_info/operators/symplectic/sparse_pauli_op.py:336) (1,925 samples, 2.33%)</title><rect x="6.2227%" y="180" width="2.3341%" height="15" fill="rgb(220,39,43)" fg:x="5132" fg:w="1925"/><text x="6.4727%" y="190.50">_..</text></g><g><title>tensor (qiskit/quantum_info/operators/symplectic/pauli_list.py:640) (1,917 samples, 2.32%)</title><rect x="6.2324%" y="196" width="2.3244%" height="15" fill="rgb(229,68,48)" fg:x="5140" fg:w="1917"/><text x="6.4824%" y="206.50">t..</text></g><g><title>tensor (qiskit/quantum_info/operators/symplectic/base_pauli.py:68) (1,847 samples, 2.24%)</title><rect x="6.3173%" y="212" width="2.2395%" height="15" fill="rgb(252,8,32)" fg:x="5210" fg:w="1847"/><text x="6.5673%" y="222.50">t..</text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;:180) (98 samples, 0.12%)</title><rect x="8.7375%" y="244" width="0.1188%" height="15" fill="rgb(223,20,43)" fg:x="7206" fg:w="98"/><text x="8.9875%" y="254.50"></text></g><g><title>array_implement_array_function (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (98 samples, 0.12%)</title><rect x="8.7375%" y="260" width="0.1188%" height="15" fill="rgb(229,81,49)" fg:x="7206" fg:w="98"/><text x="8.9875%" y="270.50"></text></g><g><title>kron (numpy/lib/shape_base.py:1172) (125 samples, 0.15%)</title><rect x="8.7060%" y="228" width="0.1516%" height="15" fill="rgb(236,28,36)" fg:x="7180" fg:w="125"/><text x="8.9560%" y="238.50"></text></g><g><title>execute_ufunc_loop (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (95 samples, 0.12%)</title><rect x="9.1110%" y="260" width="0.1152%" height="15" fill="rgb(249,185,26)" fg:x="7514" fg:w="95"/><text x="9.3610%" y="270.50"></text></g><g><title>kron (numpy/lib/shape_base.py:1179) (120 samples, 0.15%)</title><rect x="9.0904%" y="228" width="0.1455%" height="15" fill="rgb(249,174,33)" fg:x="7497" fg:w="120"/><text x="9.3404%" y="238.50"></text></g><g><title>ufunc_generic_fastcall (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (117 samples, 0.14%)</title><rect x="9.0940%" y="244" width="0.1419%" height="15" fill="rgb(233,201,37)" fg:x="7500" fg:w="117"/><text x="9.3440%" y="254.50"></text></g><g><title>_tensor (qiskit/quantum_info/operators/symplectic/sparse_pauli_op.py:337) (753 samples, 0.91%)</title><rect x="8.5568%" y="180" width="0.9130%" height="15" fill="rgb(221,78,26)" fg:x="7057" fg:w="753"/><text x="8.8068%" y="190.50"></text></g><g><title>kron (&lt;__array_function__ internals&gt;:180) (717 samples, 0.87%)</title><rect x="8.6005%" y="196" width="0.8694%" height="15" fill="rgb(250,127,30)" fg:x="7093" fg:w="717"/><text x="8.8505%" y="206.50"></text></g><g><title>array_implement_array_function (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (716 samples, 0.87%)</title><rect x="8.6017%" y="212" width="0.8682%" height="15" fill="rgb(230,49,44)" fg:x="7094" fg:w="716"/><text x="8.8517%" y="222.50"></text></g><g><title>kron (numpy/lib/shape_base.py:1182) (193 samples, 0.23%)</title><rect x="9.2359%" y="228" width="0.2340%" height="15" fill="rgb(229,67,23)" fg:x="7617" fg:w="193"/><text x="9.4859%" y="238.50"></text></g><g><title>ufunc_generic_fastcall (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (104 samples, 0.13%)</title><rect x="9.3438%" y="244" width="0.1261%" height="15" fill="rgb(249,83,47)" fg:x="7706" fg:w="104"/><text x="9.5938%" y="254.50"></text></g><g><title>PyUFunc_ReduceWrapper (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (95 samples, 0.12%)</title><rect x="9.7197%" y="292" width="0.1152%" height="15" fill="rgb(215,43,3)" fg:x="8016" fg:w="95"/><text x="9.9697%" y="302.50"></text></g><g><title>__init__ (qiskit/quantum_info/operators/symplectic/sparse_pauli_op.py:131) (177 samples, 0.21%)</title><rect x="9.6384%" y="196" width="0.2146%" height="15" fill="rgb(238,154,13)" fg:x="7949" fg:w="177"/><text x="9.8884%" y="206.50"></text></g><g><title>_count_y (qiskit/quantum_info/operators/symplectic/base_pauli.py:342) (174 samples, 0.21%)</title><rect x="9.6421%" y="212" width="0.2110%" height="15" fill="rgb(219,56,2)" fg:x="7952" fg:w="174"/><text x="9.8921%" y="222.50"></text></g><g><title>_count_y (qiskit/quantum_info/operators/symplectic/base_pauli.py:693) (169 samples, 0.20%)</title><rect x="9.6481%" y="228" width="0.2049%" height="15" fill="rgb(233,0,4)" fg:x="7957" fg:w="169"/><text x="9.8981%" y="238.50"></text></g><g><title>array_sum (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (130 samples, 0.16%)</title><rect x="9.6954%" y="244" width="0.1576%" height="15" fill="rgb(235,30,7)" fg:x="7996" fg:w="130"/><text x="9.9454%" y="254.50"></text></g><g><title>_sum (numpy/core/_methods.py:48) (128 samples, 0.16%)</title><rect x="9.6978%" y="260" width="0.1552%" height="15" fill="rgb(250,79,13)" fg:x="7998" fg:w="128"/><text x="9.9478%" y="270.50"></text></g><g><title>PyUFunc_GenericReduction (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (126 samples, 0.15%)</title><rect x="9.7003%" y="276" width="0.1528%" height="15" fill="rgb(211,146,34)" fg:x="8000" fg:w="126"/><text x="9.9503%" y="286.50"></text></g><g><title>__init__ (qiskit/quantum_info/operators/symplectic/sparse_pauli_op.py:132) (95 samples, 0.12%)</title><rect x="9.8530%" y="196" width="0.1152%" height="15" fill="rgb(228,22,38)" fg:x="8126" fg:w="95"/><text x="10.1030%" y="206.50"></text></g><g><title>_tensor (qiskit/quantum_info/operators/symplectic/sparse_pauli_op.py:338) (529 samples, 0.64%)</title><rect x="9.4699%" y="180" width="0.6414%" height="15" fill="rgb(235,168,5)" fg:x="7810" fg:w="529"/><text x="9.7199%" y="190.50"></text></g><g><title>tensor (qiskit/opflow/primitive_ops/pauli_sum_op.py:178) (3,236 samples, 3.92%)</title><rect x="6.1924%" y="148" width="3.9238%" height="15" fill="rgb(221,155,16)" fg:x="5107" fg:w="3236"/><text x="6.4424%" y="158.50">tens..</text></g><g><title>tensor (qiskit/quantum_info/operators/symplectic/sparse_pauli_op.py:327) (3,224 samples, 3.91%)</title><rect x="6.2070%" y="164" width="3.9092%" height="15" fill="rgb(215,215,53)" fg:x="5119" fg:w="3224"/><text x="6.4570%" y="174.50">tens..</text></g><g><title>__xor__ (qiskit/opflow/mixins/tensor.py:34) (3,317 samples, 4.02%)</title><rect x="6.1112%" y="132" width="4.0220%" height="15" fill="rgb(223,4,10)" fg:x="5040" fg:w="3317"/><text x="6.3612%" y="142.50">__xo..</text></g><g><title>_eq (qiskit/quantum_info/operators/symplectic/base_pauli.py:323) (107 samples, 0.13%)</title><rect x="10.2653%" y="196" width="0.1297%" height="15" fill="rgb(234,103,6)" fg:x="8466" fg:w="107"/><text x="10.5153%" y="206.50"></text></g><g><title>__eq__ (qiskit/quantum_info/operators/symplectic/pauli.py:259) (153 samples, 0.19%)</title><rect x="10.2544%" y="180" width="0.1855%" height="15" fill="rgb(227,97,0)" fg:x="8457" fg:w="153"/><text x="10.5044%" y="190.50"></text></g><g><title>add (qiskit/opflow/primitive_ops/pauli_op.py:65) (163 samples, 0.20%)</title><rect x="10.2447%" y="164" width="0.1976%" height="15" fill="rgb(234,150,53)" fg:x="8449" fg:w="163"/><text x="10.4947%" y="174.50"></text></g><g><title>_add (qiskit/quantum_info/operators/symplectic/sparse_pauli_op.py:349) (177 samples, 0.21%)</title><rect x="10.5563%" y="196" width="0.2146%" height="15" fill="rgb(228,201,54)" fg:x="8706" fg:w="177"/><text x="10.8063%" y="206.50"></text></g><g><title>__add__ (qiskit/quantum_info/operators/mixins/linear.py:46) (284 samples, 0.34%)</title><rect x="10.5345%" y="180" width="0.3444%" height="15" fill="rgb(222,22,37)" fg:x="8688" fg:w="284"/><text x="10.7845%" y="190.50"></text></g><g><title>__init__ (qiskit/quantum_info/operators/symplectic/sparse_pauli_op.py:113) (108 samples, 0.13%)</title><rect x="10.8837%" y="180" width="0.1310%" height="15" fill="rgb(237,53,32)" fg:x="8976" fg:w="108"/><text x="11.1337%" y="190.50"></text></g><g><title>add (qiskit/opflow/primitive_ops/pauli_op.py:77) (549 samples, 0.67%)</title><rect x="10.5066%" y="164" width="0.6657%" height="15" fill="rgb(233,25,53)" fg:x="8665" fg:w="549"/><text x="10.7566%" y="174.50"></text></g><g><title>new_basis_to_pauli_string (qiskit_utilities.py:101) (1,039 samples, 1.26%)</title><rect x="10.1440%" y="132" width="1.2598%" height="15" fill="rgb(210,40,34)" fg:x="8366" fg:w="1039"/><text x="10.3940%" y="142.50"></text></g><g><title>__sub__ (qiskit/opflow/mixins/star_algebra.py:76) (981 samples, 1.19%)</title><rect x="10.2144%" y="148" width="1.1895%" height="15" fill="rgb(241,220,44)" fg:x="8424" fg:w="981"/><text x="10.4644%" y="158.50"></text></g><g><title>add (qiskit/opflow/primitive_ops/pauli_op.py:78) (191 samples, 0.23%)</title><rect x="11.1723%" y="164" width="0.2316%" height="15" fill="rgb(235,28,35)" fg:x="9214" fg:w="191"/><text x="11.4223%" y="174.50"></text></g><g><title>_eq (qiskit/quantum_info/operators/symplectic/base_pauli.py:323) (101 samples, 0.12%)</title><rect x="11.4645%" y="196" width="0.1225%" height="15" fill="rgb(210,56,17)" fg:x="9455" fg:w="101"/><text x="11.7145%" y="206.50"></text></g><g><title>add (qiskit/opflow/primitive_ops/pauli_op.py:65) (160 samples, 0.19%)</title><rect x="11.4463%" y="164" width="0.1940%" height="15" fill="rgb(224,130,29)" fg:x="9440" fg:w="160"/><text x="11.6963%" y="174.50"></text></g><g><title>__eq__ (qiskit/quantum_info/operators/symplectic/pauli.py:259) (152 samples, 0.18%)</title><rect x="11.4560%" y="180" width="0.1843%" height="15" fill="rgb(235,212,8)" fg:x="9448" fg:w="152"/><text x="11.7060%" y="190.50"></text></g><g><title>_add (qiskit/quantum_info/operators/symplectic/sparse_pauli_op.py:349) (177 samples, 0.21%)</title><rect x="11.7543%" y="196" width="0.2146%" height="15" fill="rgb(223,33,50)" fg:x="9694" fg:w="177"/><text x="12.0043%" y="206.50"></text></g><g><title>__add__ (qiskit/quantum_info/operators/mixins/linear.py:46) (277 samples, 0.34%)</title><rect x="11.7361%" y="180" width="0.3359%" height="15" fill="rgb(219,149,13)" fg:x="9679" fg:w="277"/><text x="11.9861%" y="190.50"></text></g><g><title>__init__ (qiskit/quantum_info/operators/symplectic/sparse_pauli_op.py:113) (105 samples, 0.13%)</title><rect x="12.0780%" y="180" width="0.1273%" height="15" fill="rgb(250,156,29)" fg:x="9961" fg:w="105"/><text x="12.3280%" y="190.50"></text></g><g><title>add (qiskit/opflow/primitive_ops/pauli_op.py:77) (545 samples, 0.66%)</title><rect x="11.7203%" y="164" width="0.6608%" height="15" fill="rgb(216,193,19)" fg:x="9666" fg:w="545"/><text x="11.9703%" y="174.50"></text></g><g><title>__add__ (qiskit/opflow/mixins/star_algebra.py:66) (982 samples, 1.19%)</title><rect x="11.4318%" y="148" width="1.1907%" height="15" fill="rgb(216,135,14)" fg:x="9428" fg:w="982"/><text x="11.6818%" y="158.50"></text></g><g><title>add (qiskit/opflow/primitive_ops/pauli_op.py:78) (199 samples, 0.24%)</title><rect x="12.3812%" y="164" width="0.2413%" height="15" fill="rgb(241,47,5)" fg:x="10211" fg:w="199"/><text x="12.6312%" y="174.50"></text></g><g><title>new_basis_to_pauli_string (qiskit_utilities.py:92) (1,035 samples, 1.25%)</title><rect x="11.4111%" y="132" width="1.2550%" height="15" fill="rgb(233,42,35)" fg:x="9411" fg:w="1035"/><text x="11.6611%" y="142.50"></text></g><g><title>__add__ (qiskit/opflow/mixins/star_algebra.py:66) (143 samples, 0.17%)</title><rect x="12.6673%" y="148" width="0.1734%" height="15" fill="rgb(231,13,6)" fg:x="10447" fg:w="143"/><text x="12.9173%" y="158.50"></text></g><g><title>new_basis_to_pauli_string (qiskit_utilities.py:95) (153 samples, 0.19%)</title><rect x="12.6661%" y="132" width="0.1855%" height="15" fill="rgb(207,181,40)" fg:x="10446" fg:w="153"/><text x="12.9161%" y="142.50"></text></g><g><title>add (qiskit/opflow/primitive_ops/pauli_op.py:77) (88 samples, 0.11%)</title><rect x="12.9110%" y="164" width="0.1067%" height="15" fill="rgb(254,173,49)" fg:x="10648" fg:w="88"/><text x="13.1610%" y="174.50"></text></g><g><title>new_basis_to_pauli_string (qiskit_utilities.py:98) (170 samples, 0.21%)</title><rect x="12.8516%" y="132" width="0.2061%" height="15" fill="rgb(221,1,38)" fg:x="10599" fg:w="170"/><text x="13.1016%" y="142.50"></text></g><g><title>__sub__ (qiskit/opflow/mixins/star_algebra.py:76) (161 samples, 0.20%)</title><rect x="12.8625%" y="148" width="0.1952%" height="15" fill="rgb(206,124,46)" fg:x="10608" fg:w="161"/><text x="13.1125%" y="158.50"></text></g><g><title>new_convert_element (qiskit_utilities.py:85) (5,772 samples, 7.00%)</title><rect x="6.0602%" y="116" width="6.9987%" height="15" fill="rgb(249,21,11)" fg:x="4998" fg:w="5772"/><text x="6.3102%" y="126.50">new_conve..</text></g><g><title>__rmul__ (qiskit/quantum_info/operators/mixins/multiply.py:36) (84 samples, 0.10%)</title><rect x="13.0711%" y="132" width="0.1019%" height="15" fill="rgb(222,201,40)" fg:x="10780" fg:w="84"/><text x="13.3211%" y="142.50"></text></g><g><title>_multiply (qiskit/opflow/mixins/star_algebra.py:52) (84 samples, 0.10%)</title><rect x="13.0711%" y="148" width="0.1019%" height="15" fill="rgb(235,61,29)" fg:x="10780" fg:w="84"/><text x="13.3211%" y="158.50"></text></g><g><title>isclose (&lt;__array_function__ internals&gt;:180) (151 samples, 0.18%)</title><rect x="13.2930%" y="164" width="0.1831%" height="15" fill="rgb(219,207,3)" fg:x="10963" fg:w="151"/><text x="13.5430%" y="174.50"></text></g><g><title>array_implement_array_function (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (149 samples, 0.18%)</title><rect x="13.2954%" y="180" width="0.1807%" height="15" fill="rgb(222,56,46)" fg:x="10965" fg:w="149"/><text x="13.5454%" y="190.50"></text></g><g><title>simplify (qiskit/quantum_info/operators/symplectic/sparse_pauli_op.py:433) (165 samples, 0.20%)</title><rect x="13.2821%" y="148" width="0.2001%" height="15" fill="rgb(239,76,54)" fg:x="10954" fg:w="165"/><text x="13.5321%" y="158.50"></text></g><g><title>deepcopy (copy.py:172) (84 samples, 0.10%)</title><rect x="13.7416%" y="244" width="0.1019%" height="15" fill="rgb(231,124,27)" fg:x="11333" fg:w="84"/><text x="13.9916%" y="254.50"></text></g><g><title>new_matrix_to_op (qiskit_utilities.py:108) (11,061 samples, 13.41%)</title><rect x="0.4341%" y="100" width="13.4118%" height="15" fill="rgb(249,195,6)" fg:x="358" fg:w="11061"/><text x="0.6841%" y="110.50">new_matrix_to_op (qi..</text></g><g><title>new_convert_element (qiskit_utilities.py:87) (649 samples, 0.79%)</title><rect x="13.0590%" y="116" width="0.7869%" height="15" fill="rgb(237,174,47)" fg:x="10770" fg:w="649"/><text x="13.3090%" y="126.50"></text></g><g><title>reduce (qiskit/opflow/primitive_ops/pauli_sum_op.py:417) (489 samples, 0.59%)</title><rect x="13.2530%" y="132" width="0.5929%" height="15" fill="rgb(206,201,31)" fg:x="10930" fg:w="489"/><text x="13.5030%" y="142.50"></text></g><g><title>simplify (qiskit/quantum_info/operators/symplectic/sparse_pauli_op.py:444) (126 samples, 0.15%)</title><rect x="13.6931%" y="148" width="0.1528%" height="15" fill="rgb(231,57,52)" fg:x="11293" fg:w="126"/><text x="13.9431%" y="158.50"></text></g><g><title>copy (qiskit/quantum_info/operators/base_operator.py:134) (124 samples, 0.15%)</title><rect x="13.6956%" y="164" width="0.1504%" height="15" fill="rgb(248,177,22)" fg:x="11295" fg:w="124"/><text x="13.9456%" y="174.50"></text></g><g><title>deepcopy (copy.py:172) (107 samples, 0.13%)</title><rect x="13.7162%" y="180" width="0.1297%" height="15" fill="rgb(215,211,37)" fg:x="11312" fg:w="107"/><text x="13.9662%" y="190.50"></text></g><g><title>_reconstruct (copy.py:271) (97 samples, 0.12%)</title><rect x="13.7283%" y="196" width="0.1176%" height="15" fill="rgb(241,128,51)" fg:x="11322" fg:w="97"/><text x="13.9783%" y="206.50"></text></g><g><title>deepcopy (copy.py:146) (96 samples, 0.12%)</title><rect x="13.7295%" y="212" width="0.1164%" height="15" fill="rgb(227,165,31)" fg:x="11323" fg:w="96"/><text x="13.9795%" y="222.50"></text></g><g><title>_deepcopy_dict (copy.py:231) (96 samples, 0.12%)</title><rect x="13.7295%" y="228" width="0.1164%" height="15" fill="rgb(228,167,24)" fg:x="11323" fg:w="96"/><text x="13.9795%" y="238.50"></text></g><g><title>generic_wrapped_legacy_loop (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (894 samples, 1.08%)</title><rect x="14.0763%" y="212" width="1.0840%" height="15" fill="rgb(228,143,12)" fg:x="11609" fg:w="894"/><text x="14.3263%" y="222.50"></text></g><g><title>CDOUBLE_multiply_AVX2 (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (894 samples, 1.08%)</title><rect x="14.0763%" y="228" width="1.0840%" height="15" fill="rgb(249,149,8)" fg:x="11609" fg:w="894"/><text x="14.3263%" y="238.50"></text></g><g><title>array_multiply (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (946 samples, 1.15%)</title><rect x="14.0145%" y="164" width="1.1471%" height="15" fill="rgb(243,35,44)" fg:x="11558" fg:w="946"/><text x="14.2645%" y="174.50"></text></g><g><title>ufunc_generic_fastcall (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (944 samples, 1.14%)</title><rect x="14.0169%" y="180" width="1.1446%" height="15" fill="rgb(246,89,9)" fg:x="11560" fg:w="944"/><text x="14.2669%" y="190.50"></text></g><g><title>try_trivial_single_output_loop (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (901 samples, 1.09%)</title><rect x="14.0690%" y="196" width="1.0925%" height="15" fill="rgb(233,213,13)" fg:x="11603" fg:w="901"/><text x="14.3190%" y="206.50"></text></g><g><title>_contig_to_contig (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (369 samples, 0.45%)</title><rect x="15.2076%" y="244" width="0.4474%" height="15" fill="rgb(233,141,41)" fg:x="12542" fg:w="369"/><text x="15.4576%" y="254.50"></text></g><g><title>PyArray_AssignArray (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (374 samples, 0.45%)</title><rect x="15.2027%" y="212" width="0.4535%" height="15" fill="rgb(239,167,4)" fg:x="12538" fg:w="374"/><text x="15.4527%" y="222.50"></text></g><g><title>raw_array_assign_array (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (374 samples, 0.45%)</title><rect x="15.2027%" y="228" width="0.4535%" height="15" fill="rgb(209,217,16)" fg:x="12538" fg:w="374"/><text x="15.4527%" y="238.50"></text></g><g><title>copy (qiskit/quantum_info/operators/symplectic/base_pauli.py:58) (384 samples, 0.47%)</title><rect x="15.1979%" y="164" width="0.4656%" height="15" fill="rgb(219,88,35)" fg:x="12534" fg:w="384"/><text x="15.4479%" y="174.50"></text></g><g><title>array_copy (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (380 samples, 0.46%)</title><rect x="15.2027%" y="180" width="0.4608%" height="15" fill="rgb(220,193,23)" fg:x="12538" fg:w="380"/><text x="15.4527%" y="190.50"></text></g><g><title>PyArray_NewCopy (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (380 samples, 0.46%)</title><rect x="15.2027%" y="196" width="0.4608%" height="15" fill="rgb(230,90,52)" fg:x="12538" fg:w="380"/><text x="15.4527%" y="206.50"></text></g><g><title>PyArray_AssignArray (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (315 samples, 0.38%)</title><rect x="15.6635%" y="212" width="0.3819%" height="15" fill="rgb(252,106,19)" fg:x="12918" fg:w="315"/><text x="15.9135%" y="222.50"></text></g><g><title>raw_array_assign_array (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (315 samples, 0.38%)</title><rect x="15.6635%" y="228" width="0.3819%" height="15" fill="rgb(206,74,20)" fg:x="12918" fg:w="315"/><text x="15.9135%" y="238.50"></text></g><g><title>_contig_to_contig (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (311 samples, 0.38%)</title><rect x="15.6683%" y="244" width="0.3771%" height="15" fill="rgb(230,138,44)" fg:x="12922" fg:w="311"/><text x="15.9183%" y="254.50"></text></g><g><title>copy (qiskit/quantum_info/operators/symplectic/base_pauli.py:59) (321 samples, 0.39%)</title><rect x="15.6635%" y="164" width="0.3892%" height="15" fill="rgb(235,182,43)" fg:x="12918" fg:w="321"/><text x="15.9135%" y="174.50"></text></g><g><title>array_copy (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (321 samples, 0.39%)</title><rect x="15.6635%" y="180" width="0.3892%" height="15" fill="rgb(242,16,51)" fg:x="12918" fg:w="321"/><text x="15.9135%" y="190.50"></text></g><g><title>PyArray_NewCopy (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (321 samples, 0.39%)</title><rect x="15.6635%" y="196" width="0.3892%" height="15" fill="rgb(248,9,4)" fg:x="12918" fg:w="321"/><text x="15.9135%" y="206.50"></text></g><g><title>PyArray_AssignArray (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (293 samples, 0.36%)</title><rect x="16.0564%" y="212" width="0.3553%" height="15" fill="rgb(210,31,22)" fg:x="13242" fg:w="293"/><text x="16.3064%" y="222.50"></text></g><g><title>raw_array_assign_array (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (293 samples, 0.36%)</title><rect x="16.0564%" y="228" width="0.3553%" height="15" fill="rgb(239,54,39)" fg:x="13242" fg:w="293"/><text x="16.3064%" y="238.50"></text></g><g><title>_contig_to_contig (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (292 samples, 0.35%)</title><rect x="16.0576%" y="244" width="0.3541%" height="15" fill="rgb(230,99,41)" fg:x="13243" fg:w="292"/><text x="16.3076%" y="254.50"></text></g><g><title>__rmul__ (qiskit/quantum_info/operators/mixins/multiply.py:36) (2,054 samples, 2.49%)</title><rect x="13.9272%" y="132" width="2.4905%" height="15" fill="rgb(253,106,12)" fg:x="11486" fg:w="2054"/><text x="14.1772%" y="142.50">__..</text></g><g><title>_multiply (qiskit/quantum_info/operators/symplectic/sparse_pauli_op.py:367) (1,986 samples, 2.41%)</title><rect x="14.0096%" y="148" width="2.4081%" height="15" fill="rgb(213,46,41)" fg:x="11554" fg:w="1986"/><text x="14.2596%" y="158.50">_m..</text></g><g><title>copy (qiskit/quantum_info/operators/symplectic/base_pauli.py:60) (301 samples, 0.36%)</title><rect x="16.0527%" y="164" width="0.3650%" height="15" fill="rgb(215,133,35)" fg:x="13239" fg:w="301"/><text x="16.3027%" y="174.50"></text></g><g><title>array_copy (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (298 samples, 0.36%)</title><rect x="16.0564%" y="180" width="0.3613%" height="15" fill="rgb(213,28,5)" fg:x="13242" fg:w="298"/><text x="16.3064%" y="190.50"></text></g><g><title>PyArray_NewCopy (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (298 samples, 0.36%)</title><rect x="16.0564%" y="196" width="0.3613%" height="15" fill="rgb(215,77,49)" fg:x="13242" fg:w="298"/><text x="16.3064%" y="206.50"></text></g><g><title>reduce (qiskit/opflow/primitive_ops/pauli_sum_op.py:416) (2,060 samples, 2.50%)</title><rect x="13.9211%" y="116" width="2.4978%" height="15" fill="rgb(248,100,22)" fg:x="11481" fg:w="2060"/><text x="14.1711%" y="126.50">re..</text></g><g><title>CDOUBLE_isfinite (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (676 samples, 0.82%)</title><rect x="16.5596%" y="244" width="0.8197%" height="15" fill="rgb(208,67,9)" fg:x="13657" fg:w="676"/><text x="16.8096%" y="254.50"></text></g><g><title>generic_wrapped_legacy_loop (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (677 samples, 0.82%)</title><rect x="16.5596%" y="228" width="0.8209%" height="15" fill="rgb(219,133,21)" fg:x="13657" fg:w="677"/><text x="16.8096%" y="238.50"></text></g><g><title>isclose (numpy/core/numeric.py:2372) (690 samples, 0.84%)</title><rect x="16.5462%" y="180" width="0.8366%" height="15" fill="rgb(246,46,29)" fg:x="13646" fg:w="690"/><text x="16.7962%" y="190.50"></text></g><g><title>ufunc_generic_fastcall (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (690 samples, 0.84%)</title><rect x="16.5462%" y="196" width="0.8366%" height="15" fill="rgb(246,185,52)" fg:x="13646" fg:w="690"/><text x="16.7962%" y="206.50"></text></g><g><title>try_trivial_single_output_loop (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (686 samples, 0.83%)</title><rect x="16.5511%" y="212" width="0.8318%" height="15" fill="rgb(252,136,11)" fg:x="13650" fg:w="686"/><text x="16.8011%" y="222.50"></text></g><g><title>all (numpy/core/fromnumeric.py:2489) (115 samples, 0.14%)</title><rect x="17.4108%" y="228" width="0.1394%" height="15" fill="rgb(219,138,53)" fg:x="14359" fg:w="115"/><text x="17.6608%" y="238.50"></text></g><g><title>isclose (numpy/core/numeric.py:2374) (140 samples, 0.17%)</title><rect x="17.3938%" y="180" width="0.1698%" height="15" fill="rgb(211,51,23)" fg:x="14345" fg:w="140"/><text x="17.6438%" y="190.50"></text></g><g><title>all (&lt;__array_function__ internals&gt;:180) (128 samples, 0.16%)</title><rect x="17.4083%" y="196" width="0.1552%" height="15" fill="rgb(247,221,28)" fg:x="14357" fg:w="128"/><text x="17.6583%" y="206.50"></text></g><g><title>array_implement_array_function (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (127 samples, 0.15%)</title><rect x="17.4095%" y="212" width="0.1540%" height="15" fill="rgb(251,222,45)" fg:x="14358" fg:w="127"/><text x="17.6595%" y="222.50"></text></g><g><title>generic_wrapped_legacy_loop (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (742 samples, 0.90%)</title><rect x="17.7212%" y="260" width="0.8997%" height="15" fill="rgb(217,162,53)" fg:x="14615" fg:w="742"/><text x="17.9712%" y="270.50"></text></g><g><title>CDOUBLE_subtract_AVX2 (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (742 samples, 0.90%)</title><rect x="17.7212%" y="276" width="0.8997%" height="15" fill="rgb(229,93,14)" fg:x="14615" fg:w="742"/><text x="17.9712%" y="286.50"></text></g><g><title>ufunc_generic_fastcall (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (756 samples, 0.92%)</title><rect x="17.7054%" y="228" width="0.9167%" height="15" fill="rgb(209,67,49)" fg:x="14602" fg:w="756"/><text x="17.9554%" y="238.50"></text></g><g><title>try_trivial_single_output_loop (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (749 samples, 0.91%)</title><rect x="17.7139%" y="244" width="0.9082%" height="15" fill="rgb(213,87,29)" fg:x="14609" fg:w="749"/><text x="17.9639%" y="254.50"></text></g><g><title>array_subtract (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (758 samples, 0.92%)</title><rect x="17.7042%" y="212" width="0.9191%" height="15" fill="rgb(205,151,52)" fg:x="14601" fg:w="758"/><text x="17.9542%" y="222.50"></text></g><g><title>0x7fd6ad828f90 (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (88 samples, 0.11%)</title><rect x="19.1423%" y="276" width="0.1067%" height="15" fill="rgb(253,215,39)" fg:x="15787" fg:w="88"/><text x="19.3923%" y="286.50"></text></g><g><title>__hypot_finite (libm.so.6) (96 samples, 0.12%)</title><rect x="19.9510%" y="292" width="0.1164%" height="15" fill="rgb(221,220,41)" fg:x="16454" fg:w="96"/><text x="20.2010%" y="302.50"></text></g><g><title>CDOUBLE_absolute (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (2,494 samples, 3.02%)</title><rect x="18.6718%" y="260" width="3.0241%" height="15" fill="rgb(218,133,21)" fg:x="15399" fg:w="2494"/><text x="18.9218%" y="270.50">CDO..</text></g><g><title>hypot (libm.so.6) (2,018 samples, 2.45%)</title><rect x="19.2490%" y="276" width="2.4469%" height="15" fill="rgb(221,193,43)" fg:x="15875" fg:w="2018"/><text x="19.4990%" y="286.50">hy..</text></g><g><title>hypotf64 (libm.so.6) (1,343 samples, 1.63%)</title><rect x="20.0674%" y="292" width="1.6284%" height="15" fill="rgb(240,128,52)" fg:x="16550" fg:w="1343"/><text x="20.3174%" y="302.50"></text></g><g><title>generic_wrapped_legacy_loop (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (2,670 samples, 3.24%)</title><rect x="18.6718%" y="244" width="3.2375%" height="15" fill="rgb(253,114,12)" fg:x="15399" fg:w="2670"/><text x="18.9218%" y="254.50">gen..</text></g><g><title>DOUBLE_less_equal (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (176 samples, 0.21%)</title><rect x="21.6958%" y="260" width="0.2134%" height="15" fill="rgb(215,223,47)" fg:x="17893" fg:w="176"/><text x="21.9458%" y="270.50"></text></g><g><title>isclose (&lt;__array_function__ internals&gt;:180) (4,473 samples, 5.42%)</title><rect x="16.4868%" y="148" width="5.4237%" height="15" fill="rgb(248,225,23)" fg:x="13597" fg:w="4473"/><text x="16.7368%" y="158.50">isclose..</text></g><g><title>array_implement_array_function (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (4,470 samples, 5.42%)</title><rect x="16.4904%" y="164" width="5.4200%" height="15" fill="rgb(250,108,0)" fg:x="13600" fg:w="4470"/><text x="16.7404%" y="174.50">array_i..</text></g><g><title>isclose (numpy/core/numeric.py:2375) (3,585 samples, 4.35%)</title><rect x="17.5635%" y="180" width="4.3469%" height="15" fill="rgb(228,208,7)" fg:x="14485" fg:w="3585"/><text x="17.8135%" y="190.50">isclo..</text></g><g><title>within_tol (numpy/core/numeric.py:2356) (3,512 samples, 4.26%)</title><rect x="17.6521%" y="196" width="4.2584%" height="15" fill="rgb(244,45,10)" fg:x="14558" fg:w="3512"/><text x="17.9021%" y="206.50">withi..</text></g><g><title>ufunc_generic_fastcall (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (2,711 samples, 3.29%)</title><rect x="18.6233%" y="212" width="3.2872%" height="15" fill="rgb(207,125,25)" fg:x="15359" fg:w="2711"/><text x="18.8733%" y="222.50">ufu..</text></g><g><title>try_trivial_single_output_loop (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (2,684 samples, 3.25%)</title><rect x="18.6560%" y="228" width="3.2544%" height="15" fill="rgb(210,195,18)" fg:x="15386" fg:w="2684"/><text x="18.9060%" y="238.50">try..</text></g><g><title>simplify (qiskit/quantum_info/operators/symplectic/sparse_pauli_op.py:433) (4,521 samples, 5.48%)</title><rect x="16.4662%" y="132" width="5.4819%" height="15" fill="rgb(249,80,12)" fg:x="13580" fg:w="4521"/><text x="16.7162%" y="142.50">simplif..</text></g><g><title>0x7fd6ae54f630 (libc.so.6) (96 samples, 0.12%)</title><rect x="25.0352%" y="196" width="0.1164%" height="15" fill="rgb(221,65,9)" fg:x="20647" fg:w="96"/><text x="25.2852%" y="206.50"></text></g><g><title>0x7fd6ae54f685 (libc.so.6) (92 samples, 0.11%)</title><rect x="25.2425%" y="196" width="0.1116%" height="15" fill="rgb(235,49,36)" fg:x="20818" fg:w="92"/><text x="25.4925%" y="206.50"></text></g><g><title>_contig_to_contig (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (1,126 samples, 1.37%)</title><rect x="24.1900%" y="180" width="1.3653%" height="15" fill="rgb(225,32,20)" fg:x="19950" fg:w="1126"/><text x="24.4400%" y="190.50"></text></g><g><title>0x7fd6ae54f690 (libc.so.6) (150 samples, 0.18%)</title><rect x="25.3735%" y="196" width="0.1819%" height="15" fill="rgb(215,141,46)" fg:x="20926" fg:w="150"/><text x="25.6235%" y="206.50"></text></g><g><title>npyiter_buffered_iternext (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (1,170 samples, 1.42%)</title><rect x="25.5553%" y="180" width="1.4187%" height="15" fill="rgb(250,160,47)" fg:x="21076" fg:w="1170"/><text x="25.8053%" y="190.50"></text></g><g><title>npyiter_iternext_itflags0_dims1_iters1 (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (391 samples, 0.47%)</title><rect x="26.9740%" y="180" width="0.4741%" height="15" fill="rgb(216,222,40)" fg:x="22246" fg:w="391"/><text x="27.2240%" y="190.50"></text></g><g><title>mapiter_get (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (4,601 samples, 5.58%)</title><rect x="21.9869%" y="164" width="5.5789%" height="15" fill="rgb(234,217,39)" fg:x="18133" fg:w="4601"/><text x="22.2369%" y="174.50">mapiter..</text></g><g><title>npyiter_iternext_sizeone (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (97 samples, 0.12%)</title><rect x="27.4481%" y="180" width="0.1176%" height="15" fill="rgb(207,178,40)" fg:x="22637" fg:w="97"/><text x="27.6981%" y="190.50"></text></g><g><title>array_subscript (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (5,445 samples, 6.60%)</title><rect x="21.9565%" y="148" width="6.6022%" height="15" fill="rgb(221,136,13)" fg:x="18108" fg:w="5445"/><text x="22.2065%" y="158.50">array_sub..</text></g><g><title>prepare_index (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (819 samples, 0.99%)</title><rect x="27.5657%" y="164" width="0.9931%" height="15" fill="rgb(249,199,10)" fg:x="22734" fg:w="819"/><text x="27.8157%" y="174.50"></text></g><g><title>simplify (qiskit/quantum_info/operators/symplectic/sparse_pauli_op.py:434) (5,453 samples, 6.61%)</title><rect x="21.9481%" y="132" width="6.6119%" height="15" fill="rgb(249,222,13)" fg:x="18101" fg:w="5453"/><text x="22.1981%" y="142.50">simplify ..</text></g><g><title>0x7fd6ae54f600 (libc.so.6) (90 samples, 0.11%)</title><rect x="31.5052%" y="196" width="0.1091%" height="15" fill="rgb(244,185,38)" fg:x="25983" fg:w="90"/><text x="31.7552%" y="206.50"></text></g><g><title>0x7fd6ae54f630 (libc.so.6) (98 samples, 0.12%)</title><rect x="31.6144%" y="196" width="0.1188%" height="15" fill="rgb(236,202,9)" fg:x="26073" fg:w="98"/><text x="31.8644%" y="206.50"></text></g><g><title>0x7fd6ae54f685 (libc.so.6) (88 samples, 0.11%)</title><rect x="31.8217%" y="196" width="0.1067%" height="15" fill="rgb(250,229,37)" fg:x="26244" fg:w="88"/><text x="32.0717%" y="206.50"></text></g><g><title>_contig_to_contig (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (1,091 samples, 1.32%)</title><rect x="30.8153%" y="180" width="1.3229%" height="15" fill="rgb(206,174,23)" fg:x="25414" fg:w="1091"/><text x="31.0653%" y="190.50"></text></g><g><title>0x7fd6ae54f690 (libc.so.6) (155 samples, 0.19%)</title><rect x="31.9502%" y="196" width="0.1879%" height="15" fill="rgb(211,33,43)" fg:x="26350" fg:w="155"/><text x="32.2002%" y="206.50"></text></g><g><title>npyiter_buffered_iternext (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (1,142 samples, 1.38%)</title><rect x="32.1382%" y="180" width="1.3847%" height="15" fill="rgb(245,58,50)" fg:x="26505" fg:w="1142"/><text x="32.3882%" y="190.50"></text></g><g><title>npyiter_iternext_itflags0_dims1_iters1 (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (414 samples, 0.50%)</title><rect x="33.5229%" y="180" width="0.5020%" height="15" fill="rgb(244,68,36)" fg:x="27647" fg:w="414"/><text x="33.7729%" y="190.50"></text></g><g><title>mapiter_get (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (4,582 samples, 5.56%)</title><rect x="28.5879%" y="164" width="5.5558%" height="15" fill="rgb(232,229,15)" fg:x="23577" fg:w="4582"/><text x="28.8379%" y="174.50">mapiter..</text></g><g><title>npyiter_iternext_sizeone (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (98 samples, 0.12%)</title><rect x="34.0249%" y="180" width="0.1188%" height="15" fill="rgb(254,30,23)" fg:x="28061" fg:w="98"/><text x="34.2749%" y="190.50"></text></g><g><title>array_subscript (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (5,333 samples, 6.47%)</title><rect x="28.5673%" y="148" width="6.4664%" height="15" fill="rgb(235,160,14)" fg:x="23560" fg:w="5333"/><text x="28.8173%" y="158.50">array_su..</text></g><g><title>prepare_index (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (734 samples, 0.89%)</title><rect x="34.1437%" y="164" width="0.8900%" height="15" fill="rgb(212,155,44)" fg:x="28159" fg:w="734"/><text x="34.3937%" y="174.50"></text></g><g><title>simplify (qiskit/quantum_info/operators/symplectic/sparse_pauli_op.py:435) (5,342 samples, 6.48%)</title><rect x="28.5600%" y="132" width="6.4773%" height="15" fill="rgb(226,2,50)" fg:x="23554" fg:w="5342"/><text x="28.8100%" y="142.50">simplify..</text></g><g><title>_contig_to_contig (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (680 samples, 0.82%)</title><rect x="35.2847%" y="180" width="0.8245%" height="15" fill="rgb(234,177,6)" fg:x="29100" fg:w="680"/><text x="35.5347%" y="190.50"></text></g><g><title>array_boolean_subscript (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (902 samples, 1.09%)</title><rect x="35.0458%" y="164" width="1.0937%" height="15" fill="rgb(217,24,9)" fg:x="28903" fg:w="902"/><text x="35.2958%" y="174.50"></text></g><g><title>simplify (qiskit/quantum_info/operators/symplectic/sparse_pauli_op.py:436) (910 samples, 1.10%)</title><rect x="35.0373%" y="132" width="1.1034%" height="15" fill="rgb(220,13,46)" fg:x="28896" fg:w="910"/><text x="35.2873%" y="142.50"></text></g><g><title>array_subscript (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (903 samples, 1.09%)</title><rect x="35.0458%" y="148" width="1.0949%" height="15" fill="rgb(239,221,27)" fg:x="28903" fg:w="903"/><text x="35.2958%" y="158.50"></text></g><g><title>array_add (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (107 samples, 0.13%)</title><rect x="36.1650%" y="148" width="0.1297%" height="15" fill="rgb(222,198,25)" fg:x="29826" fg:w="107"/><text x="36.4150%" y="158.50"></text></g><g><title>execute_ufunc_loop (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (90 samples, 0.11%)</title><rect x="36.3141%" y="180" width="0.1091%" height="15" fill="rgb(211,99,13)" fg:x="29949" fg:w="90"/><text x="36.5641%" y="190.50"></text></g><g><title>array_multiply (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (114 samples, 0.14%)</title><rect x="36.2960%" y="148" width="0.1382%" height="15" fill="rgb(232,111,31)" fg:x="29934" fg:w="114"/><text x="36.5460%" y="158.50"></text></g><g><title>ufunc_generic_fastcall (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (109 samples, 0.13%)</title><rect x="36.3020%" y="164" width="0.1322%" height="15" fill="rgb(245,82,37)" fg:x="29939" fg:w="109"/><text x="36.5520%" y="174.50"></text></g><g><title>pack_bits (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (19,000 samples, 23.04%)</title><rect x="36.4681%" y="196" width="23.0381%" height="15" fill="rgb(227,149,46)" fg:x="30076" fg:w="19000"/><text x="36.7181%" y="206.50">pack_bits (numpy/core/_multiarray_uma..</text></g><g><title>simplify (qiskit/quantum_info/operators/symplectic/sparse_pauli_op.py:439) (19,272 samples, 23.37%)</title><rect x="36.1408%" y="132" width="23.3679%" height="15" fill="rgb(218,36,50)" fg:x="29806" fg:w="19272"/><text x="36.3908%" y="142.50">simplify (qiskit/quantum_info/operato..</text></g><g><title>packbits (&lt;__array_function__ internals&gt;:180) (19,020 samples, 23.06%)</title><rect x="36.4463%" y="148" width="23.0624%" height="15" fill="rgb(226,80,48)" fg:x="30058" fg:w="19020"/><text x="36.6963%" y="158.50">packbits (&lt;__array_function__ interna..</text></g><g><title>array_implement_array_function (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (19,018 samples, 23.06%)</title><rect x="36.4487%" y="164" width="23.0599%" height="15" fill="rgb(238,224,15)" fg:x="30060" fg:w="19018"/><text x="36.6987%" y="174.50">array_implement_array_function (numpy..</text></g><g><title>io_pack (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (19,014 samples, 23.06%)</title><rect x="36.4536%" y="180" width="23.0551%" height="15" fill="rgb(241,136,10)" fg:x="30064" fg:w="19014"/><text x="36.7036%" y="190.50">io_pack (numpy/core/_multiarray_umath..</text></g><g><title>0x7fd6ae5500ca (libc.so.6) (118 samples, 0.14%)</title><rect x="66.6929%" y="164" width="0.1431%" height="15" fill="rgb(208,32,45)" fg:x="55003" fg:w="118"/><text x="66.9429%" y="174.50"></text></g><g><title>hashbrown::map::make_hash::h514dee388bdf424a (qiskit/_accelerate.cpython-310-x86_64-linux-gnu.so) (1,089 samples, 1.32%)</title><rect x="66.8615%" y="164" width="1.3204%" height="15" fill="rgb(207,135,9)" fg:x="55142" fg:w="1089"/><text x="67.1115%" y="174.50"></text></g><g><title>simplify (qiskit/quantum_info/operators/symplectic/sparse_pauli_op.py:440) (7,163 samples, 8.69%)</title><rect x="59.5087%" y="132" width="8.6854%" height="15" fill="rgb(206,86,44)" fg:x="49078" fg:w="7163"/><text x="59.7587%" y="142.50">simplify (qi..</text></g><g><title>qiskit_accelerate::sparse_pauli_op::_::__pyfunction_unordered_unique::hec414606d856c77c (qiskit/_accelerate.cpython-310-x86_64-linux-gnu.so) (7,160 samples, 8.68%)</title><rect x="59.5123%" y="148" width="8.6817%" height="15" fill="rgb(245,177,15)" fg:x="49081" fg:w="7160"/><text x="59.7623%" y="158.50">qiskit_accel..</text></g><g><title>NpyIter_GetDataPtrArray (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (961 samples, 1.17%)</title><rect x="69.4612%" y="164" width="1.1652%" height="15" fill="rgb(206,64,50)" fg:x="57286" fg:w="961"/><text x="69.7112%" y="174.50"></text></g><g><title>npyiter_copy_from_buffers (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (1,309 samples, 1.59%)</title><rect x="73.4880%" y="180" width="1.5872%" height="15" fill="rgb(234,36,40)" fg:x="60607" fg:w="1309"/><text x="73.7380%" y="190.50"></text></g><g><title>npyiter_copy_to_buffers (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (6,284 samples, 7.62%)</title><rect x="75.0752%" y="180" width="7.6196%" height="15" fill="rgb(213,64,8)" fg:x="61916" fg:w="6284"/><text x="75.3252%" y="190.50">npyiter_co..</text></g><g><title>NpyIter_ResetBasePointers (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (13,069 samples, 15.85%)</title><rect x="70.6264%" y="164" width="15.8466%" height="15" fill="rgb(210,75,36)" fg:x="58247" fg:w="13069"/><text x="70.8764%" y="174.50">NpyIter_ResetBasePointer..</text></g><g><title>npyiter_goto_iterindex (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (3,116 samples, 3.78%)</title><rect x="82.6947%" y="180" width="3.7783%" height="15" fill="rgb(229,88,21)" fg:x="68200" fg:w="3116"/><text x="82.9447%" y="190.50">npyi..</text></g><g><title>npyiter_copy_to_buffers (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (130 samples, 0.16%)</title><rect x="86.7494%" y="212" width="0.1576%" height="15" fill="rgb(252,204,47)" fg:x="71544" fg:w="130"/><text x="86.9994%" y="222.50"></text></g><g><title>PyArray_TransferNDimToStrided (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (130 samples, 0.16%)</title><rect x="86.7494%" y="228" width="0.1576%" height="15" fill="rgb(208,77,27)" fg:x="71544" fg:w="130"/><text x="86.9994%" y="238.50"></text></g><g><title>_aligned_contig_cast_ulong_to_long (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (129 samples, 0.16%)</title><rect x="86.7507%" y="244" width="0.1564%" height="15" fill="rgb(221,76,26)" fg:x="71545" fg:w="129"/><text x="87.0007%" y="254.50"></text></g><g><title>PyArray_MapIterCheckIndices.part.0 (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (353 samples, 0.43%)</title><rect x="86.4803%" y="180" width="0.4280%" height="15" fill="rgb(225,139,18)" fg:x="71322" fg:w="353"/><text x="86.7303%" y="190.50"></text></g><g><title>npyiter_buffered_iternext (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (133 samples, 0.16%)</title><rect x="86.7470%" y="196" width="0.1613%" height="15" fill="rgb(230,137,11)" fg:x="71542" fg:w="133"/><text x="86.9970%" y="206.50"></text></g><g><title>PyArray_MapIterArrayCopyIfOverlap (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (376 samples, 0.46%)</title><rect x="86.4778%" y="164" width="0.4559%" height="15" fill="rgb(212,28,1)" fg:x="71320" fg:w="376"/><text x="86.7278%" y="174.50"></text></g><g><title>npyiter_copy_to_buffers (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (167 samples, 0.20%)</title><rect x="89.4522%" y="196" width="0.2025%" height="15" fill="rgb(248,164,17)" fg:x="73773" fg:w="167"/><text x="89.7022%" y="206.50"></text></g><g><title>PyArray_TransferNDimToStrided (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (162 samples, 0.20%)</title><rect x="89.4582%" y="212" width="0.1964%" height="15" fill="rgb(222,171,42)" fg:x="73778" fg:w="162"/><text x="89.7082%" y="222.50"></text></g><g><title>_aligned_contig_cast_ulong_to_long (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (161 samples, 0.20%)</title><rect x="89.4595%" y="228" width="0.1952%" height="15" fill="rgb(243,84,45)" fg:x="73779" fg:w="161"/><text x="89.7095%" y="238.50"></text></g><g><title>PyArray_MapIterNext (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (2,245 samples, 2.72%)</title><rect x="86.9337%" y="164" width="2.7221%" height="15" fill="rgb(252,49,23)" fg:x="71696" fg:w="2245"/><text x="87.1837%" y="174.50">Py..</text></g><g><title>npyiter_buffered_iternext (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (169 samples, 0.20%)</title><rect x="89.4510%" y="180" width="0.2049%" height="15" fill="rgb(215,19,7)" fg:x="73772" fg:w="169"/><text x="89.7010%" y="190.50"></text></g><g><title>generic_wrapped_legacy_loop (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (2,856 samples, 3.46%)</title><rect x="89.6644%" y="164" width="3.4630%" height="15" fill="rgb(238,81,41)" fg:x="73948" fg:w="2856"/><text x="89.9144%" y="174.50">gen..</text></g><g><title>CDOUBLE_add_AVX2 (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (2,549 samples, 3.09%)</title><rect x="90.0366%" y="180" width="3.0907%" height="15" fill="rgb(210,199,37)" fg:x="74255" fg:w="2549"/><text x="90.2866%" y="190.50">CDO..</text></g><g><title>npyiter_buffered_iternext (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (4,796 samples, 5.82%)</title><rect x="93.1274%" y="164" width="5.8153%" height="15" fill="rgb(244,192,49)" fg:x="76804" fg:w="4796"/><text x="93.3774%" y="174.50">npyiter..</text></g><g><title>npyiter_copy_from_buffers (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (3,503 samples, 4.25%)</title><rect x="94.6952%" y="180" width="4.2475%" height="15" fill="rgb(226,211,11)" fg:x="78097" fg:w="3503"/><text x="94.9452%" y="190.50">npyit..</text></g><g><title>simplify (qiskit/quantum_info/operators/symplectic/sparse_pauli_op.py:447) (25,278 samples, 30.65%)</title><rect x="68.2959%" y="132" width="30.6504%" height="15" fill="rgb(236,162,54)" fg:x="56325" fg:w="25278"/><text x="68.5459%" y="142.50">simplify (qiskit/quantum_info/operators/symplecti..</text></g><g><title>ufunc_at (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (25,274 samples, 30.65%)</title><rect x="68.3008%" y="148" width="30.6456%" height="15" fill="rgb(220,229,9)" fg:x="56329" fg:w="25274"/><text x="68.5508%" y="158.50">ufunc_at (numpy/core/_multiarray_umath.cpython-31..</text></g><g><title>simplify (qiskit/quantum_info/operators/symplectic/sparse_pauli_op.py:454) (245 samples, 0.30%)</title><rect x="98.9572%" y="132" width="0.2971%" height="15" fill="rgb(250,87,22)" fg:x="81612" fg:w="245"/><text x="99.2072%" y="142.50"></text></g><g><title>isclose (&lt;__array_function__ internals&gt;:180) (235 samples, 0.28%)</title><rect x="98.9693%" y="148" width="0.2849%" height="15" fill="rgb(239,43,17)" fg:x="81622" fg:w="235"/><text x="99.2193%" y="158.50"></text></g><g><title>array_implement_array_function (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (234 samples, 0.28%)</title><rect x="98.9706%" y="164" width="0.2837%" height="15" fill="rgb(231,177,25)" fg:x="81623" fg:w="234"/><text x="99.2206%" y="174.50"></text></g><g><title>isclose (numpy/core/numeric.py:2375) (95 samples, 0.12%)</title><rect x="99.1391%" y="180" width="0.1152%" height="15" fill="rgb(219,179,1)" fg:x="81762" fg:w="95"/><text x="99.3891%" y="190.50"></text></g><g><title>_count_y (qiskit/quantum_info/operators/symplectic/base_pauli.py:693) (87 samples, 0.11%)</title><rect x="99.5210%" y="180" width="0.1055%" height="15" fill="rgb(238,219,53)" fg:x="82077" fg:w="87"/><text x="99.7710%" y="190.50"></text></g><g><title>from_symplectic (qiskit/quantum_info/operators/symplectic/pauli_list.py:1070) (140 samples, 0.17%)</title><rect x="99.5004%" y="148" width="0.1698%" height="15" fill="rgb(232,167,36)" fg:x="82060" fg:w="140"/><text x="99.7504%" y="158.50"></text></g><g><title>_from_array (qiskit/quantum_info/operators/symplectic/base_pauli.py:392) (125 samples, 0.15%)</title><rect x="99.5186%" y="164" width="0.1516%" height="15" fill="rgb(244,19,51)" fg:x="82075" fg:w="125"/><text x="99.7686%" y="174.50"></text></g><g><title>new_matrix_to_op (qiskit_utilities.py:109) (70,811 samples, 85.86%)</title><rect x="13.8459%" y="100" width="85.8607%" height="15" fill="rgb(224,6,22)" fg:x="11419" fg:w="70811"/><text x="14.0959%" y="110.50">new_matrix_to_op (qiskit_utilities.py:109)</text></g><g><title>reduce (qiskit/opflow/primitive_ops/pauli_sum_op.py:417) (68,689 samples, 83.29%)</title><rect x="16.4189%" y="116" width="83.2877%" height="15" fill="rgb(224,145,5)" fg:x="13541" fg:w="68689"/><text x="16.6689%" y="126.50">reduce (qiskit/opflow/primitive_ops/pauli_sum_op.py:417)</text></g><g><title>simplify (qiskit/quantum_info/operators/symplectic/sparse_pauli_op.py:469) (176 samples, 0.21%)</title><rect x="99.4932%" y="132" width="0.2134%" height="15" fill="rgb(234,130,49)" fg:x="82054" fg:w="176"/><text x="99.7432%" y="142.50"></text></g><g><title>&lt;module&gt; (tst.py:25) (81,983 samples, 99.41%)</title><rect x="0.4292%" y="84" width="99.4071%" height="15" fill="rgb(254,6,2)" fg:x="354" fg:w="81983"/><text x="0.6792%" y="94.50">&lt;module&gt; (tst.py:25)</text></g><g><title>new_matrix_to_op (qiskit_utilities.py:111) (107 samples, 0.13%)</title><rect x="99.7066%" y="100" width="0.1297%" height="15" fill="rgb(208,96,46)" fg:x="82230" fg:w="107"/><text x="99.9566%" y="110.50"></text></g><g><title>reduce (qiskit/opflow/primitive_ops/pauli_sum_op.py:417) (106 samples, 0.13%)</title><rect x="99.7078%" y="116" width="0.1285%" height="15" fill="rgb(239,3,39)" fg:x="82231" fg:w="106"/><text x="99.9578%" y="126.50"></text></g><g><title>&lt;module&gt; (setup.py:3) (105 samples, 0.13%)</title><rect x="99.8363%" y="180" width="0.1273%" height="15" fill="rgb(233,210,1)" fg:x="82337" fg:w="105"/><text x="100.0863%" y="190.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1027) (105 samples, 0.13%)</title><rect x="99.8363%" y="196" width="0.1273%" height="15" fill="rgb(244,137,37)" fg:x="82337" fg:w="105"/><text x="100.0863%" y="206.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1006) (105 samples, 0.13%)</title><rect x="99.8363%" y="212" width="0.1273%" height="15" fill="rgb(240,136,2)" fg:x="82337" fg:w="105"/><text x="100.0863%" y="222.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:688) (105 samples, 0.13%)</title><rect x="99.8363%" y="228" width="0.1273%" height="15" fill="rgb(239,18,37)" fg:x="82337" fg:w="105"/><text x="100.0863%" y="238.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:883) (105 samples, 0.13%)</title><rect x="99.8363%" y="244" width="0.1273%" height="15" fill="rgb(218,185,22)" fg:x="82337" fg:w="105"/><text x="100.0863%" y="254.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (105 samples, 0.13%)</title><rect x="99.8363%" y="260" width="0.1273%" height="15" fill="rgb(225,218,4)" fg:x="82337" fg:w="105"/><text x="100.0863%" y="270.50"></text></g><g><title>&lt;module&gt; (tst.py:4) (106 samples, 0.13%)</title><rect x="99.8363%" y="84" width="0.1285%" height="15" fill="rgb(230,182,32)" fg:x="82337" fg:w="106"/><text x="100.0863%" y="94.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1027) (106 samples, 0.13%)</title><rect x="99.8363%" y="100" width="0.1285%" height="15" fill="rgb(242,56,43)" fg:x="82337" fg:w="106"/><text x="100.0863%" y="110.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1006) (106 samples, 0.13%)</title><rect x="99.8363%" y="116" width="0.1285%" height="15" fill="rgb(233,99,24)" fg:x="82337" fg:w="106"/><text x="100.0863%" y="126.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:688) (106 samples, 0.13%)</title><rect x="99.8363%" y="132" width="0.1285%" height="15" fill="rgb(234,209,42)" fg:x="82337" fg:w="106"/><text x="100.0863%" y="142.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:883) (106 samples, 0.13%)</title><rect x="99.8363%" y="148" width="0.1285%" height="15" fill="rgb(227,7,12)" fg:x="82337" fg:w="106"/><text x="100.0863%" y="158.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (106 samples, 0.13%)</title><rect x="99.8363%" y="164" width="0.1285%" height="15" fill="rgb(245,203,43)" fg:x="82337" fg:w="106"/><text x="100.0863%" y="174.50"></text></g><g><title>all (82,472 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(238,205,33)" fg:x="0" fg:w="82472"/><text x="0.2500%" y="62.50"></text></g><g><title>0x7fd6ae41f790 (libc.so.6) (82,472 samples, 100.00%)</title><rect x="0.0000%" y="68" width="100.0000%" height="15" fill="rgb(231,56,7)" fg:x="0" fg:w="82472"/><text x="0.2500%" y="78.50">0x7fd6ae41f790 (libc.so.6)</text></g></svg></svg>